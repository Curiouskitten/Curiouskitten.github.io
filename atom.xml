<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>柒仔的学习栈</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-01-03T08:54:32.756Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>柒仔</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>软件测试必备:linux常用命令</title>
    <link href="http://example.com/2022/01/03/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%BF%85%E5%A4%87-linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://example.com/2022/01/03/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%BF%85%E5%A4%87-linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2022-01-03T02:21:57.000Z</published>
    <updated>2022-01-03T08:54:32.756Z</updated>
    
    <content type="html"><![CDATA[<p>常用的linux命令，大部分也适用于unix类系统，比如mac os</p><span id="more"></span><h2 id="文件与目录"><a href="#文件与目录" class="headerlink" title="文件与目录"></a>文件与目录</h2><h3 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h3><p>访问目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> opt</span><br><span class="line"><span class="comment">#访问当前目录下的opt目录</span></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"><span class="comment">#返回上一级目录</span></span><br><span class="line"><span class="built_in">cd</span> ../..</span><br><span class="line"><span class="comment">#返回上两集目录</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"><span class="comment">#进入个人主目录</span></span><br></pre></td></tr></table></figure><h3 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h3><p>显示工作路径</p><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><p>查看目录中的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br><span class="line"><span class="comment">#查看当前目录中的文件</span></span><br><span class="line">ls -l  </span><br><span class="line"><span class="comment">#显示文件和目录的详细资料，也可使用ll</span></span><br><span class="line">ls -a </span><br><span class="line"><span class="comment">#显示隐藏文件</span></span><br><span class="line">ls *[0-9]* </span><br><span class="line"><span class="comment">#显示包含数字的文件名和目录名</span></span><br><span class="line">ls -lh</span><br><span class="line"><span class="comment">#显示权限</span></span><br></pre></td></tr></table></figure><h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><p>创建目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir dir1</span><br><span class="line"><span class="comment">#创建一个名为dir1的目录</span></span><br><span class="line">mkdir dir1 dir2 </span><br><span class="line"><span class="comment">#同时创建两个目录，若dir1已存在</span></span><br><span class="line">mkdir -p /tmp/dir1/dir2 </span><br><span class="line"><span class="comment">#创建一个目录树</span></span><br></pre></td></tr></table></figure><h3 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a>rmdir</h3><p>删除目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rmdir dir1</span><br><span class="line"><span class="comment">#删除名为dir1的目录</span></span><br></pre></td></tr></table></figure><h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><p>删除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rm -f file1 </span><br><span class="line"><span class="comment">#删除一个名为file1的文件</span></span><br><span class="line">rm -rf dir1 </span><br><span class="line"><span class="comment">#删除一个叫做 &#x27;dir1&#x27; 的目录并同时删除其内容</span></span><br><span class="line">rm -rf dir1 dir2 </span><br><span class="line"><span class="comment">#同时删除两个目录及它们的内容</span></span><br></pre></td></tr></table></figure><p>rm -rf /  高危操作，懂得都懂</p><h3 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h3><p>重命名/移动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv dir1 new_dir </span><br><span class="line"><span class="comment">#移动dir1至new_dir下；若new_dir不存在则重命名dir1文件为new_dir</span></span><br></pre></td></tr></table></figure><h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h3><p>复制</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cp file1 file2 </span><br><span class="line"><span class="comment">#复制file1并命名为file2</span></span><br><span class="line">cp dir/* . </span><br><span class="line"><span class="comment">#复制一个目录下的所有文件到当前工作目录</span></span><br><span class="line">cp -a /tmp/dir1 . </span><br><span class="line"><span class="comment">#复制一个目录到当前工作目录</span></span><br><span class="line">cp -a dir1 dir2 </span><br><span class="line"><span class="comment">#复制目录dir1并命名为dir2</span></span><br></pre></td></tr></table></figure><h2 id="用户与群组"><a href="#用户与群组" class="headerlink" title="用户与群组"></a>用户与群组</h2><h3 id="useradd"><a href="#useradd" class="headerlink" title="useradd"></a>useradd</h3><p>创建新用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd zhangsan</span><br><span class="line"><span class="comment">#创建名为zhangsan的用户</span></span><br></pre></td></tr></table></figure><p>passwd + 用户名：设置用户密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd zhangsan</span><br></pre></td></tr></table></figure><p>若passwd后面什么都不跟，则系统默认更改root用户的登录密码</p><p>设置普通用户的登录期限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -e 2022-12-31 zhangsan</span><br></pre></td></tr></table></figure><h3 id="usermod"><a href="#usermod" class="headerlink" title="usermod"></a>usermod</h3><p>修改用户信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">usermod -e 2023-12-31 zhangsan</span><br><span class="line"><span class="comment">#修改zhangsan的登录期限</span></span><br><span class="line">usermod -d /home/hnlinux root</span><br><span class="line"><span class="comment">#修改登录目录</span></span><br><span class="line">usermod -u 777 root</span><br><span class="line"><span class="comment">#修改用户的uid</span></span><br><span class="line">usermod -l zhangsan xiaogang</span><br><span class="line"><span class="comment">#修改zhangsan的用户名为xiaogang</span></span><br><span class="line"><span class="comment">#-l:--login </span></span><br><span class="line">usermod -g 578 newgroup</span><br><span class="line"><span class="comment">#修改用户的gid，578组一定要存在</span></span><br><span class="line"><span class="comment">#-g:--gid</span></span><br><span class="line">usermod -aG usertest zhangsan</span><br><span class="line"><span class="comment">#将zhangsan加入usertest组</span></span><br><span class="line"><span class="comment">#-a：--append；-G:--groups</span></span><br><span class="line"><span class="built_in">kill</span> -9 -u zhangsan</span><br><span class="line"><span class="comment">#杀死zhangsan执行的所有进程</span></span><br><span class="line">usermod -L zhangsan</span><br><span class="line"><span class="comment">#锁定用户密码</span></span><br><span class="line"><span class="comment">#-L:--lock</span></span><br><span class="line">usermod -u zhangsan</span><br><span class="line"><span class="comment">#解锁用户密码</span></span><br><span class="line"><span class="comment">#-U:--unlock</span></span><br></pre></td></tr></table></figure><p>使用usermod修改信息时需要保证被修改的用户没有在系统中执行任何程序;usermod不允许修改正在线上的使用者账号名称</p><h3 id="userdel"><a href="#userdel" class="headerlink" title="userdel"></a>userdel</h3><p>删除用户账号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">userdel -r zhangsan</span><br><span class="line"><span class="comment">#删除用户zhangsan及其相关文件</span></span><br><span class="line">userdel zhangsan</span><br><span class="line"><span class="comment">#仅删除zhangsan不删除其相关文件</span></span><br></pre></td></tr></table></figure><h3 id="groupadd"><a href="#groupadd" class="headerlink" title="groupadd"></a>groupadd</h3><p>创建用户组<br>用于创建新的工作组，新工作组中的信息将被添加至系统文件中<br>相关文件：<br>/etc/group 组账户信息<br>/etc/gshadow 安全组账户信息<br>/etc/login.defs Shadow 密码套件配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">groupadd -g 344 grouptest</span><br><span class="line"><span class="comment">#创建新组名为grouptest，指定组ID：344；/etc/group文件中生成一个gid为344的项目</span></span><br></pre></td></tr></table></figure><h3 id="groupmod"><a href="#groupmod" class="headerlink" title="groupmod"></a>groupmod</h3><p>修改组信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">groupmod -n grouptest newgroupname</span><br><span class="line"><span class="comment">#修改grouptest组名为newgroupname</span></span><br><span class="line"></span><br><span class="line">groupmod -g 444 grouptest</span><br><span class="line"><span class="comment">#修改组grouptest的gid为444</span></span><br></pre></td></tr></table></figure><h3 id="groupdel"><a href="#groupdel" class="headerlink" title="groupdel"></a>groupdel</h3><p>删除组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">groupdel grouptest</span><br><span class="line"><span class="comment">#删除组grouptes</span></span><br></pre></td></tr></table></figure><p>组中含有用户时，不能直接删除组，只能先删除组中的用户再删除组</p><p>###chage </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chage -E 2022-12-28 zhangsan</span><br><span class="line"><span class="comment">#设置zhangsna的密码于2022年12月30日过期</span></span><br><span class="line">chage -l 3 zhangsan</span><br><span class="line"><span class="comment">#设置zhangsan的密码从过期开始算起，3天不修改则密码失效</span></span><br></pre></td></tr></table></figure><p>密码过期&amp;密码失效<br>过期：密码到指定失效时间，系统会认为密码不安全，于是将密码设置为过期状态，用户登录时，提示用户进行密码修改<br>失效：用户密码失效后在指定时间内未进行修改，则系统将改密码设置为失效状态，用户则无法通过此密码登录</p><h2 id="文件搜索"><a href="#文件搜索" class="headerlink" title="文件搜索"></a>文件搜索</h2><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">find / -name file1 </span><br><span class="line"><span class="comment">#从 &#x27;/&#x27; 开始进入根文件系统搜索文件和目录</span></span><br><span class="line">find / -user user1 </span><br><span class="line"><span class="comment">#搜索属于用户 &#x27;user1&#x27; 的文件和目录</span></span><br><span class="line">find /home/user1 -name \*.bin </span><br><span class="line"><span class="comment">#在目录 &#x27;/ home/user1&#x27; 中搜索带有&#x27;.bin&#x27; 结尾的文件</span></span><br><span class="line">find /usr/bin -<span class="built_in">type</span> f -atime +100 </span><br><span class="line"><span class="comment">#搜索在过去100天内未被使用过的执行文件</span></span><br><span class="line">find /usr/bin -<span class="built_in">type</span> f -mtime -10 </span><br><span class="line"><span class="comment">#搜索在10天内被创建或者修改过的文件</span></span><br><span class="line">find / -name \*.rpm -<span class="built_in">exec</span> chmod 755 <span class="string">&#x27;&#123;&#125;&#x27;</span> \; </span><br><span class="line"><span class="comment">#搜索以 &#x27;.rpm&#x27; 结尾的文件并定义其权限</span></span><br><span class="line">find / -xdev -name \*.rpm </span><br><span class="line"><span class="comment">#搜索以 &#x27;.rpm&#x27; 结尾的文件，忽略光驱、捷盘等可移动设备</span></span><br></pre></td></tr></table></figure><h3 id="whereis"><a href="#whereis" class="headerlink" title="whereis"></a>whereis</h3><p>只能用于查找符合条件的二进制文件、源代码文件和man手册页</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">whereid bash</span><br><span class="line"><span class="comment">#查找bash的位置</span></span><br></pre></td></tr></table></figure><h3 id="which"><a href="#which" class="headerlink" title="which"></a>which</h3><p>在环境变量$PATH设置的目录中寻找符合条件的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">which</span> bash</span><br><span class="line"><span class="comment">#寻找bash文件并显示其绝对路径</span></span><br></pre></td></tr></table></figure><h2 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h2><h3 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h3><ul><li>设置权限</li></ul><ul><li>取消权限<br>此命令对root无效<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chmod ugo+rwx directory1 </span><br><span class="line"><span class="comment">#设置目录为所有人(u)、群组(g)以及其他人(o)以读（r ）、写(w)和执行(x)的权限</span></span><br><span class="line">chmod go-rwx directory1 </span><br><span class="line"><span class="comment">#删除群组(g)与其他人(o)对目录的读写执行权限</span></span><br></pre></td></tr></table></figure>修改权限的两种方式：</li></ul><p>1.字母：r-可读；w-可写；x-可执行；<br>2.数字：<br>0:—<br>1:–x<br>2:-w-<br>3:-wx<br>4:r–<br>5:r-x<br>6:rw-<br>7:rwx<br>ll or ls -l查看文件属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[alicedeMBP:blog alice0711]$ ls -l</span><br><span class="line">-rw-r--r--    1 alice0711  staff       0 12  9 02:30 _config.landscape.yml</span><br></pre></td></tr></table></figure><p>以上文件属性 -|rw-|r–|r– 以｜为分隔符，依次为：文件类型[-代表文件；d代表目录]｜文件所有者权限｜文件所有者所在组的用户权限｜其他用户权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chmod u=rwx file1</span><br><span class="line"><span class="comment">#将file1的用户权限修改为可读可写可执行</span></span><br><span class="line">chomd 777 file1</span><br><span class="line"><span class="comment">#将file2的用户，群组，其他用户的权限都修改为可读可写可执行</span></span><br></pre></td></tr></table></figure><h3 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h3><p>修改文件所有者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chown user1 file1 </span><br><span class="line"><span class="comment">#改变一个文件的所有人</span></span><br><span class="line">chown -R user1 directory1 </span><br><span class="line"><span class="comment">#改变directory1目录下所有文件，目录的所有者为user1</span></span><br></pre></td></tr></table></figure><h3 id="chgrp"><a href="#chgrp" class="headerlink" title="chgrp"></a>chgrp</h3><p>修改文件的群组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chgrp group1 file1</span><br><span class="line"><span class="comment">#将file1所属群组修改为group1</span></span><br></pre></td></tr></table></figure><h2 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cat file1 </span><br><span class="line"><span class="comment">#从第一个字节开始正向查看文件的内容</span></span><br><span class="line">tac file1 </span><br><span class="line"><span class="comment">#从最后一行开始反向查看一个文件的内容</span></span><br><span class="line">more file1 </span><br><span class="line"><span class="comment">#查看一个长文件的内容</span></span><br><span class="line">less file1 </span><br><span class="line"><span class="comment">#类似于 &#x27;more&#x27; 命令，但是它允许在文件中和正向操作一样的反向操作</span></span><br><span class="line">head -2 file1 </span><br><span class="line"><span class="comment">#查看一个文件的前两行</span></span><br><span class="line">tail -2 file1 </span><br><span class="line"><span class="comment">#查看一个文件的最后两行</span></span><br><span class="line">tail -f /var/<span class="built_in">log</span>/messages </span><br><span class="line"><span class="comment">#实时查看被添加到一个文件中的内容,tailf</span></span><br></pre></td></tr></table></figure><h2 id="编辑文件vi-vim"><a href="#编辑文件vi-vim" class="headerlink" title="编辑文件vi/vim"></a>编辑文件vi/vim</h2><p>所有的 Unix Like 系统都会内建 vi 文书编辑器<br>Vim 是从 vi 发展出来的一个文本编辑器，vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。<br>vim 则可以说是程序开发者的一项很好用的工具。连 vim 的<a href="http://www.vim.org/">官方网站</a>自己也说 vim 是一个程序开发工具而不是文字处理软件。</p><h3 id="vi-vim的使用"><a href="#vi-vim的使用" class="headerlink" title="vi/vim的使用"></a>vi/vim的使用</h3><p>vi/vim 共分为三种模式，分别是命令模式（Command mode），输入模式（Insert mode）和底线命令模式（Last line mode）。 这三种模式的作用分别是：</p><h4 id="命令模式："><a href="#命令模式：" class="headerlink" title="命令模式："></a>命令模式：</h4><dl><dt>用户刚刚启动 vi/vim，便进入了命令模式。<br>此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。<br>常用的几个命令：<br>i 切换到输入模式，以输入字符。<br>x 删除当前光标所在处的字符。</dt><dd>切换到底线命令模式，以在最底一行输入命令。<br>若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。<br>命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</dd></dl><h4 id="输入模式："><a href="#输入模式：" class="headerlink" title="输入模式："></a>输入模式：</h4><p>在命令模式下按下i就进入了输入模式。<br>在输入模式中，可以使用以下按键：<br>字符按键以及Shift组合，输入字符<br>ENTER，回车键，换行<br>BACK SPACE，退格键，删除光标前一个字符<br>DEL，删除键，删除光标后一个字符<br>方向键，在文本中移动光标<br>HOME/END，移动光标到行首/行尾<br>Page Up/Page Down，上/下翻页<br>Insert，切换光标为输入/替换模式，光标将变成竖线/下划线<br>ESC，退出输入模式，切换到命令模式</p><h4 id="底线命令模式："><a href="#底线命令模式：" class="headerlink" title="底线命令模式："></a>底线命令模式：</h4><p>在命令模式下按下:（英文冒号）就进入了底线命令模式。<br>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。<br>在底线命令模式中，基本的命令有（已经省略了冒号）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">q <span class="comment">#退出程序</span></span><br><span class="line">w <span class="comment">#保存文件</span></span><br><span class="line">wq <span class="comment">#保存并退出文件</span></span><br><span class="line">!q <span class="comment">#强制退出，不保存修改</span></span><br></pre></td></tr></table></figure><p>搜索替换</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/word <span class="comment">#向光标之下寻找一个名为word的字符串</span></span><br><span class="line">?word <span class="comment">#向光标之上寻找一个名为word的字符串</span></span><br></pre></td></tr></table></figure><p>配合n、N按键寻找关键词<br>/word+n：搜索到一个关键词后，继续向下搜寻关键词；<br>?word+n：搜索到一个关键词后，继续向上搜索关键词。<br>N与n相反</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">:2,10s/word1/word2/g</span><br><span class="line"><span class="comment">#从第2行至第10行寻找word1，并将word1替换为word2</span></span><br><span class="line">:3,<span class="variable">$s</span>/word1/word2/g</span><br><span class="line"><span class="comment">#从第3行至第最后一行寻找word1，并将word1替换为word2</span></span><br><span class="line">:1,<span class="variable">$s</span>/word1/word2/gc </span><br><span class="line"><span class="comment">#or </span></span><br><span class="line">:%s/word1/word2/gc</span><br><span class="line"><span class="comment">#从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代!</span></span><br></pre></td></tr></table></figure><p>删除、复制与粘贴<br>x, X<br>在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键)<br>nx    n<br>为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符,『10x』。<br>dd<br>删除游标所在的那一整行c<br>ndd<br>n 为数字。删除光标所在的向下 n 行，例如 20dd 则是删除 20 行<br>d1G<br>删除光标所在到第一行的所有数据<br>dG<br>删除光标所在到最后一行的所有数据<br>d$<br>删除游标所在处，到该行的最后一个字符<br>d0<br>那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符<br>yy<br>复制游标所在的那一行<br>nyy    n<br>为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行<br>y1G<br>复制游标所在行到第一行的所有数据<br>yG<br>复制游标所在行到最后一行的所有数据<br>y0<br>复制光标所在的那个字符到该行行首的所有数据<br>y$<br>复制光标所在的那个字符到该行行尾的所有数据<br>p, P<br>p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！ 举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后，那10行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？ 那么原本的第 20 行会被推到变成 30 行。 (常用)<br>J<br>将光标所在行与下一行的数据结合成同一行<br>c<br>重复删除多个数据，例如向下删除 10 行，[ 10cj ]<br>u<br>复原前一个动作<br>[Ctrl]+r<br>重做上一个动作</p><p>按ESC键可随时退出底线命令模式。</p><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><h3 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ifconfig eth0 </span><br><span class="line"><span class="comment">#显示一个以太网卡的配置</span></span><br><span class="line">ifup eth0 </span><br><span class="line"><span class="comment">#启用一个 &#x27;eth0&#x27; 网络设备</span></span><br><span class="line">ifdown eth0 </span><br><span class="line"><span class="comment">#禁用一个 &#x27;eth0&#x27; 网络设备</span></span><br><span class="line">ifconfig eth0 192.168.1.1 netmask 255.255.255.0 </span><br><span class="line"><span class="comment">#控制IP地址</span></span><br></pre></td></tr></table></figure><h3 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">netstat -tup </span><br><span class="line"><span class="comment">#展示所有进行中的网络连接和他们的PID</span></span><br><span class="line"><span class="comment">#-t:--tcp 显示TCP传输协议的连接状况</span></span><br><span class="line"><span class="comment">#-u:--udp 显示UDP传输协议的连接状况</span></span><br><span class="line"><span class="comment">#-p:--programs 显示正在使用Socket的程序识别码和程序名称</span></span><br><span class="line">netstat -tupl </span><br><span class="line"><span class="comment">#展示系统中左右监听的网络服务和他们的PID</span></span><br><span class="line"><span class="comment">#-l:--listening:显示监听中的服务器的socket</span></span><br></pre></td></tr></table></figure><h3 id="lsof"><a href="#lsof" class="headerlink" title="lsof"></a>lsof</h3><p>查看8080端口号的占用情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">losf -i:8080</span><br></pre></td></tr></table></figure><p>杀死进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 26993</span><br><span class="line"><span class="comment">#杀死pid为26993的进程</span></span><br></pre></td></tr></table></figure><h2 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a>系统信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">date </span><br><span class="line"><span class="comment">#显示系统日期</span></span><br><span class="line">cal 2021 </span><br><span class="line"><span class="comment">#显示2021年的日历表</span></span><br><span class="line">date 123117002021.00 </span><br><span class="line"><span class="comment">#设置日期和时间 - 月日时分年.秒</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/cpuinfo </span><br><span class="line"><span class="comment">#显示CPU info的信息</span></span><br><span class="line">cat /proc/interrupts </span><br><span class="line"><span class="comment">#显示中断</span></span><br><span class="line">cat /proc/meminfo </span><br><span class="line"><span class="comment">#校验内存使用</span></span><br><span class="line">cat /proc/swaps </span><br><span class="line"><span class="comment">#显示哪些swap被使用</span></span><br><span class="line">cat /proc/version </span><br><span class="line"><span class="comment">#显示内核的版本</span></span><br><span class="line">cat /proc/net/dev </span><br><span class="line"><span class="comment">#显示网络适配器及统计</span></span><br><span class="line">cat /proc/mounts </span><br><span class="line"><span class="comment">#显示已加载的文件系统</span></span><br><span class="line">lspci -tv </span><br><span class="line"><span class="comment">#罗列 PCI 设备</span></span><br><span class="line">lsusb -tv </span><br><span class="line"><span class="comment">#显示 USB 设备</span></span><br></pre></td></tr></table></figure><h2 id="系统关机、重启、登出"><a href="#系统关机、重启、登出" class="headerlink" title="系统关机、重启、登出"></a>系统关机、重启、登出</h2><h3 id="关机"><a href="#关机" class="headerlink" title="关机"></a>关机</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">shutdown -h now</span><br><span class="line"><span class="comment">#or</span></span><br><span class="line">init 0</span><br><span class="line"><span class="comment">#or</span></span><br><span class="line">telinit 0</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">shutdown -h hours:minutes &amp; </span><br><span class="line"><span class="comment">#按预定时间关闭系统</span></span><br><span class="line">shutdown -c </span><br><span class="line"><span class="comment">#取消按预定时间关闭系统</span></span><br></pre></td></tr></table></figure><h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shutdown -r now</span><br><span class="line"><span class="comment">#or</span></span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><h3 id="注销"><a href="#注销" class="headerlink" title="注销"></a>注销</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">logout</span></span><br></pre></td></tr></table></figure><h2 id="磁盘空间"><a href="#磁盘空间" class="headerlink" title="磁盘空间"></a>磁盘空间</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">df -h </span><br><span class="line"><span class="comment">#显示已经挂载的分区列表</span></span><br><span class="line">ls -lSr |more </span><br><span class="line"><span class="comment">#以尺寸大小排列文件和目录</span></span><br><span class="line">du -sh dir1 </span><br><span class="line"><span class="comment">#估算目录dir1已经使用的磁盘空间</span></span><br><span class="line">du -sk * | sort -rn </span><br><span class="line"><span class="comment">#以容量大小为依据依次显示文件和目录的大小</span></span><br></pre></td></tr></table></figure><h2 id="打包和压缩文件"><a href="#打包和压缩文件" class="headerlink" title="打包和压缩文件"></a>打包和压缩文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">bunzip2 file1.bz2 </span><br><span class="line"><span class="comment">#解压一个叫做 &#x27;file1.bz2&#x27;的文件</span></span><br><span class="line">bzip2 file1 </span><br><span class="line"><span class="comment">#压缩一个叫做 &#x27;file1&#x27; 的文件</span></span><br><span class="line">gunzip file1.gz </span><br><span class="line"><span class="comment">#解压一个叫做 &#x27;file1.gz&#x27;的文件</span></span><br><span class="line">gzip file1 </span><br><span class="line"><span class="comment">#压缩一个叫做 &#x27;file1&#x27;的文件</span></span><br><span class="line">gzip -9 file1 </span><br><span class="line"><span class="comment">#最大程度压缩</span></span><br><span class="line">rar a file1.rar test_file </span><br><span class="line"><span class="comment">#创建一个叫做 &#x27;file1.rar&#x27; 的包</span></span><br><span class="line">rar a file1.rar file1 file2 dir1 </span><br><span class="line"><span class="comment">#同时压缩 &#x27;file1&#x27;, &#x27;file2&#x27; 以及目录 &#x27;dir1&#x27;</span></span><br><span class="line">rar x file1.rar </span><br><span class="line"><span class="comment">#解压rar包</span></span><br><span class="line">unrar x file1.rar </span><br><span class="line"><span class="comment">#解压rar包</span></span><br><span class="line">tar -cvf archive.tar file1 </span><br><span class="line"><span class="comment">#创建一个非压缩的 tarball</span></span><br><span class="line">tar -cvf archive.tar file1 file2 dir1 </span><br><span class="line"><span class="comment">#创建一个包含了 &#x27;file1&#x27;, &#x27;file2&#x27; 以及 &#x27;dir1&#x27;的档案文件</span></span><br><span class="line">tar -tf archive.tar </span><br><span class="line"><span class="comment">#显示一个包中的内容</span></span><br><span class="line">tar -xvf archive.tar </span><br><span class="line"><span class="comment">#释放一个包</span></span><br><span class="line">tar -xvf archive.tar -C /tmp </span><br><span class="line"><span class="comment">#将压缩包释放到 /tmp目录下</span></span><br><span class="line">tar -cvfj archive.tar.bz2 dir1 </span><br><span class="line"><span class="comment">#创建一个bzip2格式的压缩包</span></span><br><span class="line">tar -xvfj archive.tar.bz2 </span><br><span class="line"><span class="comment">#解压一个bzip2格式的压缩包</span></span><br><span class="line">tar -cvfz archive.tar.gz dir1 </span><br><span class="line"><span class="comment">#创建一个gzip格式的压缩包</span></span><br><span class="line">tar -xvfz archive.tar.gz </span><br><span class="line"><span class="comment">#解压一个gzip格式的压缩包</span></span><br><span class="line">zip file1.zip file1 </span><br><span class="line"><span class="comment">#创建一个zip格式的压缩包</span></span><br><span class="line">zip -r file1.zip file1 file2 dir1 </span><br><span class="line"><span class="comment">#将几个文件和目录同时压缩成一个zip格式的压缩包</span></span><br><span class="line">unzip file1.zip </span><br><span class="line"><span class="comment">#解压一个zip格式压缩包</span></span><br></pre></td></tr></table></figure><h2 id="yum-软件包升级"><a href="#yum-软件包升级" class="headerlink" title="yum 软件包升级"></a>yum 软件包升级</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">yum install package_name </span><br><span class="line"><span class="comment">#下载并安装一个rpm包</span></span><br><span class="line">yum localinstall package_name.rpm </span><br><span class="line"><span class="comment">#将安装一个rpm包，使用你自己的软件仓库为你解决所有依赖关系</span></span><br><span class="line">yum update package_name.rpm </span><br><span class="line"><span class="comment">#更新当前系统中所有安装的rpm包</span></span><br><span class="line">yum update package_name </span><br><span class="line"><span class="comment">#更新一个rpm包</span></span><br><span class="line">yum remove package_name </span><br><span class="line"><span class="comment">#删除一个rpm包</span></span><br><span class="line">yum list </span><br><span class="line"><span class="comment">#列出当前系统中安装的所有包</span></span><br><span class="line">yum search package_name </span><br><span class="line"><span class="comment">#在rpm仓库中搜寻软件包</span></span><br><span class="line">yum clean packages </span><br><span class="line"><span class="comment">#清理rpm缓存删除下载的包</span></span><br><span class="line">yum clean headers </span><br><span class="line"><span class="comment">#删除所有头文件</span></span><br><span class="line">yum clean all </span><br><span class="line"><span class="comment">#删除所有缓存的包和头文件</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;常用的linux命令，大部分也适用于unix类系统，比如mac os&lt;/p&gt;</summary>
    
    
    
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>git快速入门</title>
    <link href="http://example.com/2021/12/23/git%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <id>http://example.com/2021/12/23/git%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</id>
    <published>2021-12-22T17:21:48.000Z</published>
    <updated>2021-12-22T17:56:04.757Z</updated>
    
    <content type="html"><![CDATA[<p>简单的git操作指南</p><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><p>git支持多操作系统，包括macos，windows，linux</p><h2 id="创建新仓库"><a href="#创建新仓库" class="headerlink" title="创建新仓库"></a>创建新仓库</h2><p>本地创建新的文件夹，打开并执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><h2 id="检出仓库"><a href="#检出仓库" class="headerlink" title="检出仓库"></a>检出仓库</h2><p>创建一个本地的克隆仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> /path/to/repository</span><br></pre></td></tr></table></figure><p>若克隆的是远程服务器上的仓库，则命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> username@host:/path/to/repository</span><br></pre></td></tr></table></figure><h2 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h2><p>本地仓库由三部分组成：<br>1.工作目录:持有实际文件<br>｜<br>｜add<br>｜</p><p>2.暂存区(index)：一个缓存区域，临时保存你的改动<br>｜<br>｜commit<br>｜<br>3.HEAD：指向最后一次提交的结果</p><h2 id="添加和提交"><a href="#添加和提交" class="headerlink" title="添加和提交"></a>添加和提交</h2><p>提交更改-将内容添加至暂存区，使用命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add filename</span><br><span class="line"><span class="comment">#or</span></span><br><span class="line">git add *</span><br></pre></td></tr></table></figure><p>这是git基本工作流程的第一步；<br>提交实际改动，使用命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;代码提交信息&quot;</span></span><br></pre></td></tr></table></figure><p>至此，你的改动已经提交到了HEAD，但是还没有传到远程仓库</p><h2 id="推动改动"><a href="#推动改动" class="headerlink" title="推动改动"></a>推动改动</h2><p>将存在本地仓库的HEAD的改动，提交至远程仓库，执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>此处的master为主干名称，可以换成想要推送的任何分支</p><p>如果还没有克隆现有仓库，并打算将你的仓库连接到某个远程服务器，使用如下命令添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin &lt;server&gt;</span><br></pre></td></tr></table></figure><p>如此，就能将改动推送至所添加的服务器上</p><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>分支是用来将特性开发绝缘开来的，在创建仓库的时候，master是默认的分支，在其他分支上进行开发，完成后再将它们合并到主分支上，也称之为合主干</p><p>创建一个叫做“feature_x”的分支。并切换过去：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b feature_x</span><br></pre></td></tr></table></figure><p>切换回主干：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure><p>将新建的分支删除：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d feature_x</span><br></pre></td></tr></table></figure><p>本地创建的分支除非被推送到远程仓库，否则该分支不为他人可见，推送分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin &lt;branch&gt;</span><br></pre></td></tr></table></figure><h2 id="更新与合并"><a href="#更新与合并" class="headerlink" title="更新与合并"></a>更新与合并</h2><p>更新本地仓库，执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><p>在你的工作目录中 获取（fetch） 并 合并（merge） 远端的改动。<br>要合并其他分支到你的当前分支（例如 master），执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge &lt;branch&gt;</span><br></pre></td></tr></table></figure><p>在这两种情况下，git 都会尝试去自动合并改动。遗憾的是，这可能并非每次都成功，并可能出现冲突（conflicts）。 这时候就需要你修改这些文件来手动合并这些冲突（conflicts）。改完之后，你需要执行如下命令以将它们标记为合并成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;filename&gt;</span><br></pre></td></tr></table></figure><p>在合并改动之前，你可以使用如下命令预览差异：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff &lt;source_branch&gt; &lt;target_branch&gt;</span><br></pre></td></tr></table></figure><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><p>为软件发布创建标签是推荐的。这个概念早已存在，在SVN中也有。可以执行如下命令创建一个叫做 1.0.0 的标签：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag 1.0.0 1b2e1d63ff</span><br></pre></td></tr></table></figure><p>1b2e1d63ff 是你想要标记的提交ID的前10位字符。可以使用下列命令获取提交 ID：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><p>你也可以少写一点提交ID前几位，只要它的指向具有唯一性。</p><h2 id="替换本地改动"><a href="#替换本地改动" class="headerlink" title="替换本地改动"></a>替换本地改动</h2><p>假如你操作失误，可以使用如下命令替换掉本地改动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- &lt;filename&gt;</span><br></pre></td></tr></table></figure><p>此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到暂存区的改动以及新文件都不会受到影响。</p><p>假如你想丢弃你在本地的所有改动与提交，可以到服务器上获取最新的版本历史，并将你本地主分支指向它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin</span><br><span class="line">git reset --hard origin/master</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>内建的图形化 git：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitk</span><br></pre></td></tr></table></figure><p>彩色的 git 输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config color.ui <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>显示历史记录时，每个提交的信息只显示一行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config format.pretty oneline</span><br></pre></td></tr></table></figure><p>交互式添加文件到暂存区：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add -i</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;简单的git操作指南&lt;/p&gt;
&lt;h2 id=&quot;安装git&quot;&gt;&lt;a href=&quot;#安装git&quot; class=&quot;headerlink&quot; title=&quot;安装git&quot;&gt;&lt;/a&gt;安装git&lt;/h2&gt;&lt;p&gt;git支持多操作系统，包括macos，windows，linux&lt;/p&gt;
&lt;h2</summary>
      
    
    
    
    
    <category term="git" scheme="http://example.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>软件测试必备：常用sql语句</title>
    <link href="http://example.com/2021/12/21/%E6%B5%8B%E8%AF%95%E5%BF%85%E5%A4%87%EF%BC%9A%E5%B8%B8%E7%94%A8sql%E8%AF%AD%E5%8F%A5/"/>
    <id>http://example.com/2021/12/21/%E6%B5%8B%E8%AF%95%E5%BF%85%E5%A4%87%EF%BC%9A%E5%B8%B8%E7%94%A8sql%E8%AF%AD%E5%8F%A5/</id>
    <published>2021-12-20T17:08:39.000Z</published>
    <updated>2021-12-22T17:11:58.208Z</updated>
    
    <content type="html"><![CDATA[<p>总结的基础sql语句，不完全适用于mysql，软件测试必备技能，需要熟记熟用<br>（持续补充）</p><h2 id="Table-表管理"><a href="#Table-表管理" class="headerlink" title="Table 表管理"></a>Table 表管理</h2><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><p>创建一个名为student的表没包含id，name和age三个字段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE student (id INT PRIMARY KEY, name VARCHAR(20) NOT NUll,age INT DEFAULT 0);</span><br></pre></td></tr></table></figure><h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE student;</span><br></pre></td></tr></table></figure><h3 id="新增列"><a href="#新增列" class="headerlink" title="新增列"></a>新增列</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE student</span><br><span class="line">ADD col_name col_type;</span><br></pre></td></tr></table></figure><h3 id="删除列"><a href="#删除列" class="headerlink" title="删除列"></a>删除列</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE student</span><br><span class="line">DROP COLUMN col_1;</span><br></pre></td></tr></table></figure><h3 id="添加约束"><a href="#添加约束" class="headerlink" title="添加约束"></a>添加约束</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE student</span><br><span class="line">ADD constraint;</span><br></pre></td></tr></table></figure><h3 id="删除约束"><a href="#删除约束" class="headerlink" title="删除约束"></a>删除约束</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE student</span><br><span class="line">DROP constraint;</span><br></pre></td></tr></table></figure><h3 id="重命名表"><a href="#重命名表" class="headerlink" title="重命名表"></a>重命名表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE current_name</span><br><span class="line">RENAME TO new_name;</span><br></pre></td></tr></table></figure><h3 id="重命名列"><a href="#重命名列" class="headerlink" title="重命名列"></a>重命名列</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE student</span><br><span class="line">CHANGE COLUMN old_col new_col data_type;</span><br></pre></td></tr></table></figure><h3 id="清空表数据（截断表）"><a href="#清空表数据（截断表）" class="headerlink" title="清空表数据（截断表）"></a>清空表数据（截断表）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRUNCATE TABLE student;</span><br></pre></td></tr></table></figure><h2 id="Delete-删除"><a href="#Delete-删除" class="headerlink" title="Delete 删除"></a>Delete 删除</h2><h3 id="删除表中所有行（清空表记录）"><a href="#删除表中所有行（清空表记录）" class="headerlink" title="删除表中所有行（清空表记录）"></a>删除表中所有行（清空表记录）</h3><p>attention：TRUNCATE清空表会恢复自增长字段初始值，而DELETE清空不会</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM student;</span><br></pre></td></tr></table></figure><h3 id="删除student表中满足查询条件的行"><a href="#删除student表中满足查询条件的行" class="headerlink" title="删除student表中满足查询条件的行"></a>删除student表中满足查询条件的行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM student WHERE id = <span class="string">&quot;001&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="Insert-新增"><a href="#Insert-新增" class="headerlink" title="Insert 新增"></a>Insert 新增</h2><h3 id="在表中插入一条记录，对所有字段赋值"><a href="#在表中插入一条记录，对所有字段赋值" class="headerlink" title="在表中插入一条记录，对所有字段赋值"></a>在表中插入一条记录，对所有字段赋值</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO student VALUES (001,<span class="string">&quot;alice&quot;</span>,20);</span><br></pre></td></tr></table></figure><h3 id="在表中插入数据，对指定字段赋值"><a href="#在表中插入数据，对指定字段赋值" class="headerlink" title="在表中插入数据，对指定字段赋值"></a>在表中插入数据，对指定字段赋值</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO student (id,name,age) VALUES (002,<span class="string">&quot;apple&quot;</span>,23);</span><br></pre></td></tr></table></figure><h3 id="插入多行数据"><a href="#插入多行数据" class="headerlink" title="插入多行数据"></a>插入多行数据</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO student (id,name,age) VALUES (003,<span class="string">&quot;Aldous&quot;</span>,30),(004,<span class="string">&quot;Arthur&quot;</span>,30),...;</span><br></pre></td></tr></table></figure><h3 id="INSERT…SELECT-插入"><a href="#INSERT…SELECT-插入" class="headerlink" title="INSERT…SELECT 插入"></a>INSERT…SELECT 插入</h3><p>将student中查询的数据插入到user表中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO t_user_info(id,name) SELECT id,name from student;</span><br></pre></td></tr></table></figure><h2 id="Update-修改"><a href="#Update-修改" class="headerlink" title="Update 修改"></a>Update 修改</h2><h3 id="修改所有行的单个列的值"><a href="#修改所有行的单个列的值" class="headerlink" title="修改所有行的单个列的值"></a>修改所有行的单个列的值</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE student SET update_time = <span class="string">&quot;2021-12-12&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="根据条件修改对应的指定列的值"><a href="#根据条件修改对应的指定列的值" class="headerlink" title="根据条件修改对应的指定列的值"></a>根据条件修改对应的指定列的值</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE student SET name = <span class="string">&quot;alice001&quot;</span> <span class="built_in">where</span> id = <span class="string">&quot;001&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="关联更新"><a href="#关联更新" class="headerlink" title="关联更新"></a>关联更新</h3><p>在更新sql语句中可以使用连接查询</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UPDATE student s JOIN t_user_info u ON s.uid = u.id</span><br><span class="line">SET s.col_1 = 1 <span class="built_in">where</span> s.col_1 = 0 AND u.col_2 IS NULL;</span><br></pre></td></tr></table></figure><h2 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h2><h3 id="单表查询多列"><a href="#单表查询多列" class="headerlink" title="单表查询多列"></a>单表查询多列</h3><p>从table_name获取col_1,col_2,col_3列数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT col_1,col_2,col_3 FROM table_name;</span><br></pre></td></tr></table></figure><h3 id="查询表中所有列数据"><a href="#查询表中所有列数据" class="headerlink" title="查询表中所有列数据"></a>查询表中所有列数据</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * from table_name;</span><br></pre></td></tr></table></figure><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><p>根据过滤条件从table_name表中获取col_1,col_2列的数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT col_1,col_2 </span><br><span class="line">FROM table_name </span><br><span class="line">WHERE id = <span class="string">&quot;001&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="高级查询"><a href="#高级查询" class="headerlink" title="高级查询"></a>高级查询</h2><h3 id="DISTINCT-去重"><a href="#DISTINCT-去重" class="headerlink" title="DISTINCT 去重"></a>DISTINCT 去重</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT(col_1)</span><br><span class="line">from table_name</span><br><span class="line"><span class="built_in">where</span> <span class="built_in">type</span> = <span class="string">&quot;int&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="ORDER-BY-生序-降序排序"><a href="#ORDER-BY-生序-降序排序" class="headerlink" title="ORDER BY 生序/降序排序"></a>ORDER BY 生序/降序排序</h3><p>ASC–生序<br>DESC–降序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * from table_name ORDER BY col_1 ASC;</span><br><span class="line"></span><br><span class="line">SELECT * form table_name ORDER BY col_1 DESC;</span><br></pre></td></tr></table></figure><h3 id="LIMIT-n-OFFSER-m-分页查询"><a href="#LIMIT-n-OFFSER-m-分页查询" class="headerlink" title="LIMIT n OFFSER m 分页查询"></a>LIMIT n OFFSER m 分页查询</h3><p>从表table_name中以col_2降序排序，去掉两行数据，获取第一个(即结果数据中第行数据)col_1,col2的值，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT col_1,col_2 FROM table_name ORDER BY col_2 DESC LIMIT 1 OFFSET 2;</span><br></pre></td></tr></table></figure><h3 id="ORDER-BY-分组"><a href="#ORDER-BY-分组" class="headerlink" title="ORDER BY 分组"></a>ORDER BY 分组</h3><p>分组常采用聚合函数进行计算，如SUM，AVG，COUNT，MAX，MIN</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT col_1,SUM(col_2) FROM table_name GROUP BY col_1;</span><br></pre></td></tr></table></figure><h3 id="HAVING-分组过滤"><a href="#HAVING-分组过滤" class="headerlink" title="HAVING 分组过滤"></a>HAVING 分组过滤</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT col_1,SUM(col_2) FROM table_name GROUP BY col_1 HAVING <span class="built_in">type</span> IS NULL;</span><br></pre></td></tr></table></figure><h2 id="高级查询-常见sql操作符"><a href="#高级查询-常见sql操作符" class="headerlink" title="高级查询 常见sql操作符"></a>高级查询 常见sql操作符</h2><h3 id="UNION-ALL"><a href="#UNION-ALL" class="headerlink" title="UNION ALL"></a>UNION ALL</h3><p>合并两个查询结果集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT col_1,col_2 FROM table1 UNION [ALL] SELECT col_1,col_2 FROM table2;</span><br></pre></td></tr></table></figure><h3 id="LIKE-NOT-LIKE"><a href="#LIKE-NOT-LIKE" class="headerlink" title="LIKE/NOT LIKE"></a>LIKE/NOT LIKE</h3><p>根据给定模式进行匹配（模糊查询）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT col_1,col_2 FROM table_name WHERE col_1 LIKE pattern;</span><br><span class="line"><span class="comment">#or</span></span><br><span class="line">SELECT col_1,col_2 FROM table_name WHERE col_1 NOT LIKE pattern;</span><br></pre></td></tr></table></figure><h3 id="IN-NOT-IN"><a href="#IN-NOT-IN" class="headerlink" title="IN/NOT IN"></a>IN/NOT IN</h3><p>根据给定数据集，获取指定列具有/不具有响应列的行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT col_1,col_2 FROM table_name WHERE col_1 IN (<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>);</span><br><span class="line"><span class="comment">#or</span></span><br><span class="line">SELECT col_1,col_2 FROM table_name WHERE col_1 NOT IN (<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="BETWEEN…AND…"><a href="#BETWEEN…AND…" class="headerlink" title="BETWEEN…AND…"></a>BETWEEN…AND…</h3><p>获取列表在给定范围内的行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM table_name WHERE col_1 BETWEEN <span class="string">&quot;10&quot;</span> and <span class="string">&quot;50&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="NULL-NOT-NULL"><a href="#NULL-NOT-NULL" class="headerlink" title="NULL/NOT NULL"></a>NULL/NOT NULL</h3><p>获取列值为空或非空的行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM table_name WHERE col_1 IS NULL;</span><br><span class="line"><span class="comment">#or</span></span><br><span class="line">SELECT * FROM table_name WHERE col_1 IS NOT NULL;</span><br></pre></td></tr></table></figure><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><h3 id="INNER-JOIN-内连接"><a href="#INNER-JOIN-内连接" class="headerlink" title="INNER JOIN 内连接"></a>INNER JOIN 内连接</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM A INNER JOIN B ON A.key = B.key; </span><br></pre></td></tr></table></figure><h3 id="LEFT-JOIN-左外连接"><a href="#LEFT-JOIN-左外连接" class="headerlink" title="LEFT JOIN 左外连接"></a>LEFT JOIN 左外连接</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM A LEFT JOIN B ON A.key = B.key;</span><br></pre></td></tr></table></figure><h3 id="LEFT-JOIN-左外连接（排除B部分）"><a href="#LEFT-JOIN-左外连接（排除B部分）" class="headerlink" title="LEFT JOIN 左外连接（排除B部分）"></a>LEFT JOIN 左外连接（排除B部分）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM A LEFT JOIN B ON A.key = B.key WHERE B.key IS NULL;</span><br></pre></td></tr></table></figure><h3 id="RIGHT-JOIN-右外连接"><a href="#RIGHT-JOIN-右外连接" class="headerlink" title="RIGHT JOIN 右外连接"></a>RIGHT JOIN 右外连接</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM A RIGHT JOIN B ON A.key = B.key;</span><br></pre></td></tr></table></figure><h3 id="RIGHT-JOIN-右外连接（排除A部分）"><a href="#RIGHT-JOIN-右外连接（排除A部分）" class="headerlink" title="RIGHT JOIN 右外连接（排除A部分）"></a>RIGHT JOIN 右外连接（排除A部分）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM A RIGHT JOIN B ON A.key = B.key WHERE A.key IS NULL;</span><br></pre></td></tr></table></figure><h3 id="FULL-JOIN-全外连接"><a href="#FULL-JOIN-全外连接" class="headerlink" title="FULL JOIN 全外连接"></a>FULL JOIN 全外连接</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM A FULL JOIN B ON A.key = B.key;</span><br></pre></td></tr></table></figure><p>attention:MYSQL中不支持FULL JOIN，可以使用UNION ALL的方式达到FULL JOIN效果</p><h3 id="FULL-JOIN-全外连接（排除交叉）"><a href="#FULL-JOIN-全外连接（排除交叉）" class="headerlink" title="FULL JOIN 全外连接（排除交叉）"></a>FULL JOIN 全外连接（排除交叉）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM A FULL JOIN B ON A.key = B.key WHERE A.key IS NULL</span><br><span class="line">OR B.key IS NULL;</span><br></pre></td></tr></table></figure><p>attention:MYSQL中不支持FULL JOIN，可以使用UNION ALL的方式达到FULL JOIN效果</p><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><h3 id="独立于外部查询，子查询只执行一次，执行完将结果传递给外部查询"><a href="#独立于外部查询，子查询只执行一次，执行完将结果传递给外部查询" class="headerlink" title="独立于外部查询，子查询只执行一次，执行完将结果传递给外部查询"></a>独立于外部查询，子查询只执行一次，执行完将结果传递给外部查询</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM A WHERE A.id IN(SELECT id FORM B);</span><br></pre></td></tr></table></figure><h3 id="相关子查询"><a href="#相关子查询" class="headerlink" title="相关子查询"></a>相关子查询</h3><p>依赖于外部查询的数据，外部查询每执行一次，子查询就执行一次</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM grade t1 WHERE t1.score &gt;</span><br><span class="line">(SELECT AVG(t2.score) FROM grade t2 WHERE t1.id = t2.id);</span><br></pre></td></tr></table></figure><h3 id="比较运算符子查询"><a href="#比较运算符子查询" class="headerlink" title="比较运算符子查询"></a>比较运算符子查询</h3><p>使用比较运算符的子查询</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM student WHERE id = (SELECT MAX(id)</span><br><span class="line">FROM student);</span><br></pre></td></tr></table></figure><h3 id="IN-NOT-IN型子查询"><a href="#IN-NOT-IN型子查询" class="headerlink" title="IN/NOT IN型子查询"></a>IN/NOT IN型子查询</h3><p>data_list可以是具体的数值，也可以是通过子查询得到的数据集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM student WHERE id IN (data_list);</span><br><span class="line"><span class="comment">#or</span></span><br><span class="line">SELECT * FROM student WHERE id NOT IN (data_list);</span><br></pre></td></tr></table></figure><h3 id="EXISTS-NOT-EXISTS型子查询"><a href="#EXISTS-NOT-EXISTS型子查询" class="headerlink" title="EXISTS/NOT EXISTS型子查询"></a>EXISTS/NOT EXISTS型子查询</h3><p>exists对外表进行循环逐条查询，每次查询会查看exists的条件语句，如果子查询返回记录行，则留下当前循环的这条记录，否则丢弃这记录。not exists则相反</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM student WHERE EXISTS (select id FROM B);</span><br><span class="line"></span><br><span class="line">SELECT * FROM student WHERE NOT EXISTS (select id FROM B);</span><br></pre></td></tr></table></figure><h2 id="LIMIT-分页查询"><a href="#LIMIT-分页查询" class="headerlink" title="LIMIT 分页查询"></a>LIMIT 分页查询</h2><h3 id="LIMIT-M-N分页"><a href="#LIMIT-M-N分页" class="headerlink" title="LIMIT M,N分页"></a>LIMIT M,N分页</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM student LIMIT 0,10;</span><br><span class="line"></span><br><span class="line">SELECT * FROM student LIMIT 10,10;</span><br></pre></td></tr></table></figure><h3 id="LIMIT-M-OFFSET-N-分页"><a href="#LIMIT-M-OFFSET-N-分页" class="headerlink" title="LIMIT M OFFSET N 分页"></a>LIMIT M OFFSET N 分页</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM student LIMIT 10 OFFSET 0;</span><br><span class="line"></span><br><span class="line">SELECT * FROM student LIMIT 10 OFFSET 10;</span><br></pre></td></tr></table></figure><h3 id="TOP语法-取前几条记录"><a href="#TOP语法-取前几条记录" class="headerlink" title="TOP语法 取前几条记录"></a>TOP语法 取前几条记录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM student LIMIT 5;</span><br><span class="line"></span><br><span class="line">SELECT * FROM student ORDER BY id DESC LIMIT 1;</span><br></pre></td></tr></table></figure><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><h3 id="AVG-求平均值"><a href="#AVG-求平均值" class="headerlink" title="AVG()求平均值"></a>AVG()求平均值</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT AVG(age) FROM student;</span><br></pre></td></tr></table></figure><h3 id="COUNT-统计行数"><a href="#COUNT-统计行数" class="headerlink" title="COUNT()统计行数"></a>COUNT()统计行数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(id) FROM student; </span><br></pre></td></tr></table></figure><h3 id="MAX-求最大值"><a href="#MAX-求最大值" class="headerlink" title="MAX()求最大值"></a>MAX()求最大值</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT MAX(age) FROM student;</span><br></pre></td></tr></table></figure><h3 id="MIN-求最小值"><a href="#MIN-求最小值" class="headerlink" title="MIN()求最小值"></a>MIN()求最小值</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT MIN(age) FROM student;</span><br></pre></td></tr></table></figure><h3 id="SUM-求和"><a href="#SUM-求和" class="headerlink" title="SUM()求和"></a>SUM()求和</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT SUM(age) FROM student;</span><br></pre></td></tr></table></figure><h3 id="GROUP-CONCAT"><a href="#GROUP-CONCAT" class="headerlink" title="GROUP_CONCAT()"></a>GROUP_CONCAT()</h3><p>将GROUP BY产生的同一分组中的值连接起来，返回一个字符串结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT name,GROUP_CONCAT(id) FROM student GROUP BY name;</span><br></pre></td></tr></table></figure><h2 id="VIEW-视图"><a href="#VIEW-视图" class="headerlink" title="VIEW 视图"></a>VIEW 视图</h2><h3 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h3><p>创建table的col_1和col_2两列的视图</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE VIEW view_1(col_1,col_2) AS SELECT col_1,col_2 FROM table1;</span><br></pre></td></tr></table></figure><h3 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP VIEW view_1；</span><br></pre></td></tr></table></figure><h2 id="INDEX-索引"><a href="#INDEX-索引" class="headerlink" title="INDEX 索引"></a>INDEX 索引</h2><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><p>在table1的col_1和col_2上创建一个索引</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX index_1 ON table_1(col_1,col_2);</span><br></pre></td></tr></table></figure><h3 id="创建唯一索引"><a href="#创建唯一索引" class="headerlink" title="创建唯一索引"></a>创建唯一索引</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE UNIQUE INDEX index_1 ON table1(col_1,col_2);</span><br></pre></td></tr></table></figure><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP INDEX index_1 ON table1;</span><br></pre></td></tr></table></figure><h2 id="TRIGGER-触发器"><a href="#TRIGGER-触发器" class="headerlink" title="TRIGGER 触发器"></a>TRIGGER 触发器</h2><h3 id="创建触发器语法"><a href="#创建触发器语法" class="headerlink" title="创建触发器语法"></a>创建触发器语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TRIGGER trigger_name trigger_time trigger_event ON table_name FOR EACH ROW trigger_stmt;</span><br></pre></td></tr></table></figure><p>trigger_name:触发器名称<br>trigger_time:触发程序动作时间，表示出发程序是在激活它的语句之前或之后出发，可以是BEFORE或AFTER<br>trigger_event:激活触发的语句类型，可以是INSERT、UPDATE、DELETE<br>table_name:表名，必须是永久表，不能是缓存表<br>trigger_stmt:触发激活时执行的语句</p><h3 id="删除触发器"><a href="#删除触发器" class="headerlink" title="删除触发器"></a>删除触发器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TRIGGER trigger_name;</span><br></pre></td></tr></table></figure><h2 id="控制流程函数"><a href="#控制流程函数" class="headerlink" title="控制流程函数"></a>控制流程函数</h2><h3 id="IFNULL-判空表达式"><a href="#IFNULL-判空表达式" class="headerlink" title="IFNULL 判空表达式"></a>IFNULL 判空表达式</h3><p>语法：IFNULL(expr1,expr2)<br>expr1不为NULL，则IFNULL()的返回值为expr1；否则其返回值为expr2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT id IFNULL(class_id,0) FROM student;</span><br><span class="line"></span><br><span class="line">SELECT IFNULL(1,0);</span><br><span class="line"><span class="comment">#--1</span></span><br><span class="line">SELECT IFNULL(NULL,10);</span><br><span class="line"><span class="comment">#--10</span></span><br></pre></td></tr></table></figure><h3 id="NULLIF"><a href="#NULLIF" class="headerlink" title="NULLIF"></a>NULLIF</h3><p>语法：NULLIF（expr1,expr2),假如expr1 = expr2,返回null，否则返回expr1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT NULLIF(1,1);</span><br><span class="line"><span class="comment">#--NULL</span></span><br><span class="line">SELECT NULLIF(1,2);</span><br><span class="line"><span class="comment">#--1</span></span><br></pre></td></tr></table></figure><h3 id="IF"><a href="#IF" class="headerlink" title="IF"></a>IF</h3><p>语法：IF(expr1,expr2,expr3)<br>expr1是TRUE(expr1&lt;&gt;0 and expr1&lt;&gt;NULL).则IF()的返回值为expr2；否则返回值为expr3</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT IF(1&lt;2,<span class="string">&#x27;yes&#x27;</span>,<span class="string">&#x27;no&#x27;</span>);</span><br><span class="line"><span class="comment">#---yes</span></span><br></pre></td></tr></table></figure><h3 id="CASE…WHEN…THEN…"><a href="#CASE…WHEN…THEN…" class="headerlink" title="CASE…WHEN…THEN…"></a>CASE…WHEN…THEN…</h3><p>用于计算条件列表并返回多个可能结果表达式之一，类似于程序语言的条件分支语句</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT CASE sex WHEN <span class="string">&#x27;1&#x27;</span> THEN <span class="string">&#x27;男&#x27;</span> WHEN <span class="string">&#x27;2&#x27;</span> THEN <span class="string">&#x27;女&#x27;</span> ELSE ‘其他’ END FROM student；</span><br></pre></td></tr></table></figure><h2 id="PROCEDURE-存储过程"><a href="#PROCEDURE-存储过程" class="headerlink" title="PROCEDURE 存储过程"></a>PROCEDURE 存储过程</h2><p>概念：<br>存储过程是大型数据库系统非常重要的对象，它是一组为了完成特定功能的SQL语句集，是SQL语句和控制语句的预编译合集</p><p>不带参数的存储过程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE PROCEDURE proc_show_curdate() </span><br><span class="line">BEGIN </span><br><span class="line">select CURDATE();</span><br><span class="line">END</span><br></pre></td></tr></table></figure><p>带IN和OUT类型参数的存储过程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE PROCEDURE proc_del_and_count (IN del_id INT UNSIGNED,OUT count_records INT UNSIGNED)</span><br><span class="line">BEGIM</span><br><span class="line">DELETE FROM student WHERE id=del_id;</span><br><span class="line">SELECT COUNT(1) FROM student INTO count_records;</span><br><span class="line">END </span><br></pre></td></tr></table></figure><p>调用存储过程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CALL proc_show_curdate();</span><br><span class="line"></span><br><span class="line">CALL proc_del_and_count(1.@count_records);</span><br></pre></td></tr></table></figure><p>获得用户变量的值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT @count_records；</span><br></pre></td></tr></table></figure><p>删除存储过程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP PROCEDURE proc_del_and_count;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;总结的基础sql语句，不完全适用于mysql，软件测试必备技能，需要熟记熟用&lt;br&gt;（持续补充）&lt;/p&gt;
&lt;h2 id=&quot;Table-表管理&quot;&gt;&lt;a href=&quot;#Table-表管理&quot; class=&quot;headerlink&quot; title=&quot;Table 表管理&quot;&gt;&lt;/a&gt;Tab</summary>
      
    
    
    
    
    <category term="mysql" scheme="http://example.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/12/19/hello-world/"/>
    <id>http://example.com/2021/12/19/hello-world/</id>
    <published>2021-12-19T13:58:14.287Z</published>
    <updated>2021-12-19T13:58:14.287Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    
    <category term="hexo" scheme="http://example.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Python基础语法</title>
    <link href="http://example.com/2021/12/16/Python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>http://example.com/2021/12/16/Python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</id>
    <published>2021-12-15T17:22:20.000Z</published>
    <updated>2021-12-19T13:58:03.544Z</updated>
    
    <content type="html"><![CDATA[<p>总结的python基础语法，必须熟记和使用<br>(持续完善)</p><span id="more"></span><h2 id="字符串-string"><a href="#字符串-string" class="headerlink" title="字符串 string"></a>字符串 string</h2><p>赋值使用‘ ’or“ ”圈住内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;hello world python&#x27;</span></span><br></pre></td></tr></table></figure><p>打印字符串s的第一个字符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(s[0])</span><br></pre></td></tr></table></figure><p>打印字符串s倒数第6个字符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(s[-6])</span><br></pre></td></tr></table></figure><p>字符串的切片:取字符串s第1至第12个字符，每两个输出一个字符，()内区间，左闭右开</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(s[0:12:2])</span><br></pre></td></tr></table></figure><p>attention:input()输出的数据类型默认为字符串</p><h3 id="字符串的格式化输出1"><a href="#字符串的格式化输出1" class="headerlink" title="字符串的格式化输出1:"></a>字符串的格式化输出1:</h3><p>%s:字符串 —接受任何数据类型<br>%d:整数   —仅支持数字<br>%f:浮点数 —仅支持数字<br>%的作用是占坑，( )做格式化输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(</span><br><span class="line">    <span class="string">&#x27;&#x27;</span><span class="string">&#x27;=====个人信息=====</span></span><br><span class="line"><span class="string">    姓名：%s</span></span><br><span class="line"><span class="string">    性别：%s</span></span><br><span class="line"><span class="string">    年龄：%d</span></span><br><span class="line"><span class="string">    身高：%f</span></span><br><span class="line"><span class="string">    &#x27;</span><span class="string">&#x27;&#x27;</span>%(<span class="string">&#x27;小七&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,18,160.5)</span><br><span class="line">)</span><br><span class="line">=====个人信息=====</span><br><span class="line">    姓名：小七</span><br><span class="line">    性别：女</span><br><span class="line">    年龄：18</span><br><span class="line">    身高：160.500000</span><br></pre></td></tr></table></figure><h3 id="字符串的格式化输出2-format-有序和无序"><a href="#字符串的格式化输出2-format-有序和无序" class="headerlink" title="字符串的格式化输出2:.format 有序和无序"></a>字符串的格式化输出2:.format 有序和无序</h3><p>{}占坑,字符串.format—–&gt;相对来说使用的比较频繁，例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">=====个人信息=====</span></span><br><span class="line"><span class="string">姓名：&#123;&#125;</span></span><br><span class="line"><span class="string">性别：&#123;&#125;</span></span><br><span class="line"><span class="string">年龄：&#123;&#125;</span></span><br><span class="line"><span class="string">身高：&#123;&#125;</span></span><br><span class="line"><span class="string">&#x27;</span><span class="string">&#x27;&#x27;</span>.format(<span class="string">&#x27;七仔&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,20,165.3)</span><br><span class="line">      )</span><br><span class="line">=====个人信息=====</span><br><span class="line">姓名：七仔</span><br><span class="line">性别：女</span><br><span class="line">年龄：20</span><br><span class="line">身高：165.3</span><br></pre></td></tr></table></figure><p>attention:<br>1.{}跟数据的个数最好一致，如果不一致起码{}要比值的数量少；<br>2.()里面的值也是有索引的，也是从0开始，我们可以在{}指定取值的索引<br>3.可以在有些{}给定索引，有些{}不给定索引—-&gt;绝对不行！！！要给就全部给，不给就全部都不给</p><h3 id="python字符串的常用方法"><a href="#python字符串的常用方法" class="headerlink" title="python字符串的常用方法"></a>python字符串的常用方法</h3><p>find()函数：返回-1表示未找到子字符串，如果找到了就返回对应字符的 索引或字符串第一个字符的索引<br>子字符串包含了单个字符，或者是多个字符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;learn python in lemon&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s.find(<span class="string">&#x27;n&#x27;</span>))<span class="comment">#返回找到的字符串的索引值&gt;&gt;&gt;4</span></span><br><span class="line"><span class="built_in">print</span>(s.find(<span class="string">&#x27;python&#x27;</span>))<span class="comment">#返回找到的字符串的第一个索引值&gt;&gt;&gt;6</span></span><br><span class="line"><span class="built_in">print</span>(s.find(<span class="string">&#x27;k&#x27;</span>))<span class="comment">#如果没找到，返回-1&gt;&gt;&gt;-1</span></span><br><span class="line"><span class="built_in">print</span>(s.find(<span class="string">&#x27;o&#x27;</span>,1))<span class="comment">#寻找的目标子字符串：一个字符串中存在多个相同的字符，此处寻找第一个o</span></span><br><span class="line"><span class="built_in">print</span>(s.find(<span class="string">&#x27;o&#x27;</span>,11))<span class="comment">#寻找的目标子字符串：此处寻找第二个o</span></span><br></pre></td></tr></table></figure><p>isdigit()函数：如果只包含数字，就返回True，否则返回False</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;111&#x27;</span>.isdigit())<span class="comment">#&gt;&gt;&gt;True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;s&#x27;</span>.isdigit())<span class="comment">#&gt;&gt;&gt;False</span></span><br></pre></td></tr></table></figure><p>replace（）函数：指定替换内容以及被替换字符串，并且可以指定替换次数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s[0] = <span class="string">&#x27;k&#x27;</span> </span><br><span class="line"><span class="comment">#TypeError:&#x27;str&#x27;,object does not support item assignment 不能根据索引重新指派</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s[0])<span class="comment">#&gt;&gt;&gt;l</span></span><br><span class="line">new_s = s.replace(<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;k&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(new_s)<span class="comment">#&gt;&gt;&gt;leark pythok ik lemok</span></span><br><span class="line">renew_s = s.replace(<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,1)<span class="comment">#数字表示替换的次数，当需要替换的字符串有多个，不填写数字则默认全部替换，填写数字则进行对应次数替换</span></span><br><span class="line"><span class="built_in">print</span>(renew_s)<span class="comment">#&gt;&gt;&gt;leark python in lemon</span></span><br></pre></td></tr></table></figure><p>split()函数：根据指定字符对字符串进行切割,可以指定切割的次数，默认是全部切割</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t = <span class="string">&#x27;learn python in lemon&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(t.split(<span class="string">&#x27; &#x27;</span>,2)) <span class="comment">#返回一个列表，列表里面的元素都是字符串,attention:这里指定空格为切割符；结果：[&#x27;learn&#x27;, &#x27;python&#x27;, &#x27;in lemon&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(t.split(<span class="string">&#x27;l&#x27;</span>))<span class="comment">#结果：[&#x27;&#x27;, &#x27;earn python in &#x27;, &#x27;emon&#x27;]，这里被用作切割符的字符串结果中不展示，第一个返回是个空字符串</span></span><br></pre></td></tr></table></figure><p>strip()函数：去掉头或尾指定的字符，返回一个新的字符串</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&#x27;****learn python in lemon\n&#x27;</span><span class="comment">#\n-python中的换行符</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">a_2 = a.strip(<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a_2)<span class="comment">#&gt;&gt;&gt;learn python in lemon\n</span></span><br><span class="line">a_3 = a_2.strip(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a_3)<span class="comment">#&gt;&gt;&gt;learn python in lemon</span></span><br></pre></td></tr></table></figure><p>upper()函数：字符串字母转成大写<br>lower()函数：字符串的字母转成小写<br>swapcase()函数：字符串的字母大小写互换</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">b = <span class="string">&#x27;learn python in lemon&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(b.upper())<span class="comment">#&gt;&gt;&gt;LEARN PYTHON IN LEMON</span></span><br><span class="line"><span class="built_in">print</span>(b.upper().lower())<span class="comment">#&gt;&gt;&gt;learn python in lemon</span></span><br><span class="line">常用于不区分大小写限制</span><br><span class="line"><span class="built_in">print</span>(b.swapcase())<span class="comment">#&gt;&gt;&gt;LEARN PYTHON IN LEMON</span></span><br></pre></td></tr></table></figure><h2 id="数据类型-列表-list"><a href="#数据类型-列表-list" class="headerlink" title="数据类型_列表_list"></a>数据类型_列表_list</h2><p>python的数据类型之列表<br>列表的定义：<br>关键字：list（列表）<br>使用最频繁的数据类型，列表可以完成大多数集合类的数据结构实现<br>它支持字符，数字，字符串甚至包含列表（即嵌套）<br>列表用[]标识<br>有序数据</p><h3 id="1-空列表"><a href="#1-空列表" class="headerlink" title="1.空列表"></a>1.空列表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t = []</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t))<span class="comment">#&gt;&gt;&gt;&lt;class &#x27;list&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(len(t))<span class="comment">#&gt;&gt;&gt;0</span></span><br></pre></td></tr></table></figure><h3 id="2-列表里面的数据用逗号隔开，数据可以是任意数据类型"><a href="#2-列表里面的数据用逗号隔开，数据可以是任意数据类型" class="headerlink" title="2.列表里面的数据用逗号隔开，数据可以是任意数据类型"></a>2.列表里面的数据用逗号隔开，数据可以是任意数据类型</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">t = [1,0.03,False,True,<span class="string">&#x27;hello&#x27;</span>,(1,2,<span class="string">&#x27;python&#x27;</span>),[1,0.5,False]]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t))<span class="comment">#&gt;&gt;&gt;&lt;class &#x27;list&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(len(t))<span class="comment">#&gt;&gt;&gt;7</span></span><br><span class="line"><span class="built_in">print</span>(t[2])<span class="comment">#&gt;&gt;&gt;False</span></span><br><span class="line"><span class="built_in">print</span>(t[5][2][2])<span class="comment">#&gt;&gt;&gt;t</span></span><br><span class="line"><span class="built_in">print</span>(t[-1][-1])<span class="comment">#&gt;&gt;&gt;False</span></span><br></pre></td></tr></table></figure><h3 id="3-列表的操作：增删改查"><a href="#3-列表的操作：增删改查" class="headerlink" title="3.列表的操作：增删改查"></a>3.列表的操作：增删改查</h3><p>列表的特性：有序可变<br>有序：说明有索引，索引也是从0/-1开始，也分正序和反序，索引规则同字符串<br>可变：说明列表可以做删 增 改<br>切片：同字符串切片规则，列表明[start:end:step]</p><h4 id="取值偶数位的元素"><a href="#取值偶数位的元素" class="headerlink" title="取值偶数位的元素"></a>取值偶数位的元素</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(t[0::2])<span class="comment">#取到的还是列表&gt;&gt;&gt;[1, False, &#x27;hello&#x27;, [1, 0.5, False]]</span></span><br></pre></td></tr></table></figure><h4 id="列表进行倒叙输出"><a href="#列表进行倒叙输出" class="headerlink" title="列表进行倒叙输出"></a>列表进行倒叙输出</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(t[::-1])<span class="comment">#&gt;&gt;&gt;[[1, 0.5, False], (1, 2, &#x27;python&#x27;), &#x27;hello&#x27;, True, False, 0.03, 1]</span></span><br></pre></td></tr></table></figure><p>attention：<br>列表与元祖的不同之处<br>1.元祖不可变，列表可变<br>2.元祖如果只有一个元素要记得加逗号，列表无这个操作<br>3.元祖 tuple() 列表 list[]</p><p>列表与元祖的相同之处：<br>1.有序 有索引<br>2.可以根据索引取值<br>3.切片的方法方式都是一样的</p><h4 id="增加元素"><a href="#增加元素" class="headerlink" title="增加元素"></a>增加元素</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">t.append(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(t)<span class="comment">#&gt;&gt;&gt;[1, 0.03, False, True, &#x27;hello&#x27;, (1, 2, &#x27;python&#x27;), [1, 0.5, False], &#x27;test&#x27;]</span></span><br><span class="line">t.append(<span class="string">&#x27;测试&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(t)<span class="comment">#&gt;&gt;&gt;[1, 0.03, False, True, &#x27;hello&#x27;, (1, 2, &#x27;python&#x27;), [1, 0.5, False], &#x27;test&#x27;, &#x27;测试&#x27;]</span></span><br></pre></td></tr></table></figure><p>综上所述.append()默认追加元素到列表的末尾，每次只能添加一个元素</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">t.insert(1,<span class="string">&#x27;insert&#x27;</span>)<span class="comment">#可以插入到指定索引位置，原有的保留并往后挪一位&gt;&gt;&gt;[1, &#x27;insert&#x27;, 0.03, False, True, &#x27;hello&#x27;, (1, 2, &#x27;python&#x27;), [1, 0.5, False], &#x27;test&#x27;, &#x27;测试&#x27;]</span></span><br><span class="line">t.extend([1,2,3,4])<span class="comment">#拓展列表的操作，合并列表，注意是合并而不是将列表作为一个值嵌套进列表中&gt;&gt;&gt;[1, &#x27;insert&#x27;, 0.03, False, True, &#x27;hello&#x27;, (1, 2, &#x27;python&#x27;), [1, 0.5, False], &#x27;test&#x27;, &#x27;测试&#x27;, 1, 2, 3, 4]</span></span><br><span class="line">s = [5,6,7]</span><br><span class="line">t = t+s</span><br><span class="line"><span class="built_in">print</span>(t)<span class="comment">#&gt;&gt;&gt;[1, &#x27;insert&#x27;, 0.03, False, True, &#x27;hello&#x27;, (1, 2, &#x27;python&#x27;), [1, 0.5, False], &#x27;test&#x27;, &#x27;测试&#x27;, 1, 2, 3, 4, 5, 6, 7]</span></span><br></pre></td></tr></table></figure><h4 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">t.pop()<span class="comment">#默认删除最后一个元素</span></span><br><span class="line">t.pop(i)<span class="comment">#删除列表中指定位置的元素</span></span><br><span class="line">t.pop(0)<span class="comment">#删除列表中第一个值</span></span><br><span class="line">t.clear()<span class="comment">#移除列表里面的所有数据</span></span><br></pre></td></tr></table></figure><h4 id="修改元素，修改原有的值，赋值的方式-列表名-索引值-新值"><a href="#修改元素，修改原有的值，赋值的方式-列表名-索引值-新值" class="headerlink" title="修改元素，修改原有的值，赋值的方式 列表名[索引值]=新值"></a>修改元素，修改原有的值，赋值的方式 列表名[索引值]=新值</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t2[2] = False</span><br><span class="line"><span class="built_in">print</span>(t2)<span class="comment">#&gt;&gt;&gt;[1, 0.02, False, &#x27;hello&#x27;, (1, 2, 3, &#x27;python&#x27;), [1, 0.02, False, [&#x27;hello&#x27;]]]</span></span><br></pre></td></tr></table></figure><h4 id="查：根据索引值取值，切片"><a href="#查：根据索引值取值，切片" class="headerlink" title="查：根据索引值取值，切片"></a>查：根据索引值取值，切片</h4><p>.index()<br>.count()</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(t2.index(1))<span class="comment">#括号内的值为列表中的元素，作用是确定元素所在的搜索位置&gt;&gt;&gt;0</span></span><br><span class="line"><span class="built_in">print</span>(t2.count(0.02))<span class="comment">#统计列表中0.02这个元素的数量&gt;&gt;&gt;1</span></span><br></pre></td></tr></table></figure><p>百分百需要记住的函数：.append();.extend();insert()；.pop();</p><h2 id="数据类型-元祖-tuple"><a href="#数据类型-元祖-tuple" class="headerlink" title="数据类型_元祖_tuple"></a>数据类型_元祖_tuple</h2><p>元祖的定义：<br>特性：关键字 tuple()<br>它支持字符，数字，字符串甚至可以包含元祖（即嵌套）<br>元祖用（）标识<br>有序数据<br>t = ()#空元祖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t))<span class="comment">#&gt;&gt;&gt;&lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(len)<span class="comment">#&gt;&gt;&gt;0</span></span><br></pre></td></tr></table></figure><p>t2 = (1,)#只有一个数据的时候注意取法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t2))<span class="comment">#&gt;&gt;&gt;&lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(t2)<span class="comment">#&gt;&gt;&gt;0</span></span><br></pre></td></tr></table></figure><h3 id="索引，索引取值，切片同字符串的方法"><a href="#索引，索引取值，切片同字符串的方法" class="headerlink" title="索引，索引取值，切片同字符串的方法"></a>索引，索引取值，切片同字符串的方法</h3><p>修改元祖的值：不可修改，元祖属于不可变数据<br>嵌套元祖，例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t3 = (1,0.03,True,<span class="string">&#x27;false&#x27;</span>,(4,5,6,<span class="string">&#x27;python&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t3))<span class="comment">#&gt;&gt;&gt;&lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(len(t3))<span class="comment">#&gt;&gt;&gt;5</span></span><br></pre></td></tr></table></figure><h3 id="元祖的特性：有序不可变"><a href="#元祖的特性：有序不可变" class="headerlink" title="元祖的特性：有序不可变"></a>元祖的特性：有序不可变</h3><p>有序：说明有索引，索引也是从0/-1开始，也分正序和反序<br>不可变：说明元祖一旦确定，那么值就不能做变更；删 增 改都不支持</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(t3[0])<span class="comment">#&gt;&gt;&gt;1</span></span><br><span class="line"><span class="built_in">print</span>(t3[-1])<span class="comment">#&gt;&gt;&gt;(4, 5, 6, &#x27;python&#x27;)</span></span><br></pre></td></tr></table></figure><p>元祖里面的嵌套取值：根据索引一层一层的去定位</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(t3[-1][-1][0])<span class="comment">#&gt;&gt;&gt;p</span></span><br></pre></td></tr></table></figure><h3 id="元祖的切片：元祖名-start-end-step"><a href="#元祖的切片：元祖名-start-end-step" class="headerlink" title="元祖的切片：元祖名[start:end:step]"></a>元祖的切片：元祖名[start:end:step]</h3><p>取值偶数位的元素</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(t3[0::2])<span class="comment">#取到的还是元祖&gt;&gt;&gt;(1, True, (4, 5, 6, &#x27;python&#x27;))</span></span><br></pre></td></tr></table></figure><h3 id="元祖进行倒叙输出"><a href="#元祖进行倒叙输出" class="headerlink" title="元祖进行倒叙输出"></a>元祖进行倒叙输出</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(t3[::-1])<span class="comment">#&gt;&gt;&gt;((4, 5, 6, &#x27;python&#x27;), &#x27;false&#x27;, True, 0.03, 1)</span></span><br></pre></td></tr></table></figure><h3 id="元祖的常用方法："><a href="#元祖的常用方法：" class="headerlink" title="元祖的常用方法："></a>元祖的常用方法：</h3><p>index(x):获取x的索引值，获取元祖里面某个元素的索引值<br>count(x):统计x的个数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(t3.index(0.03))<span class="comment">#&gt;&gt;&gt;1</span></span><br><span class="line"><span class="built_in">print</span>(t3.count(1))<span class="comment">#此处输出为2，why？因为存在布尔值True，布尔值中True == 1；false == 0；</span></span><br></pre></td></tr></table></figure><h2 id="数据类型-字典-dict"><a href="#数据类型-字典-dict" class="headerlink" title="数据类型_字典_dict"></a>数据类型_字典_dict</h2><p>字典的定义：<br>关键字：dictionary（dict），除列表以外python之中最灵活的内置数据结构类型字典是无序的对象集合<br>标识：{}<br>无序数据，是除了列表之外，python中使用最多的数据类型<br>存储数据的形式： key:value<br>key:是唯一的且不可边变的数据（int float tuple boolen，str）<br>value:任何数据类型都支持</p><p>question1：如果key重复的话，会如何？<br>result：后面的值会把前面的值覆盖掉</p><h3 id="空字典"><a href="#空字典" class="headerlink" title="空字典"></a>空字典</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(d))<span class="comment">#&gt;&gt;&gt;&lt;class &#x27;dict&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h3 id="定义一个字典-key-value"><a href="#定义一个字典-key-value" class="headerlink" title="定义一个字典 key:value"></a>定义一个字典 key:value</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">d1 = &#123;1:<span class="string">&#x27;no 1&#x27;</span>,</span><br><span class="line">     0.02:<span class="string">&#x27;零花钱&#x27;</span>,</span><br><span class="line">     True:<span class="string">&#x27;result&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;name&#x27;</span>:666,</span><br><span class="line">     (1,3):<span class="string">&#x27;tuple&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;list&#x27;</span>:[2,3,4]</span><br><span class="line">      &#125;</span><br><span class="line"><span class="built_in">print</span>(d1)<span class="comment">#&gt;&gt;&gt;&#123;1: &#x27;result&#x27;, 0.02: &#x27;零花钱&#x27;, &#x27;name&#x27;: 666, (1, 3): &#x27;tuple&#x27;, &#x27;list&#x27;: [2, 3, 4]&#125;</span></span><br></pre></td></tr></table></figure><h3 id="字典的无序"><a href="#字典的无序" class="headerlink" title="字典的无序"></a>字典的无序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(d1)<span class="comment">#每一次执行输出的时候都会变化顺序,随机的不好复现</span></span><br></pre></td></tr></table></figure><h3 id="字典的取值，根据key取值，字典名-key"><a href="#字典的取值，根据key取值，字典名-key" class="headerlink" title="字典的取值，根据key取值，字典名[key]"></a>字典的取值，根据key取值，字典名[key]</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(d1[True])<span class="comment">#&gt;&gt;&gt;result</span></span><br><span class="line"><span class="built_in">print</span>(d1[<span class="string">&#x27;list&#x27;</span>][-1])<span class="comment">#&gt;&gt;&gt;4</span></span><br></pre></td></tr></table></figure><h3 id="key的唯一"><a href="#key的唯一" class="headerlink" title="key的唯一"></a>key的唯一</h3><p>key必须是唯一的不重复的，如果出现重复的，则后面的值会把前面的值覆盖掉<br>字典也是用来存储数据的，那么何时使用字典？<br>当值需要成对存储的时候，可以理解为数据库</p><h3 id="字典的操作，增，删，改，查询"><a href="#字典的操作，增，删，改，查询" class="headerlink" title="字典的操作，增，删，改，查询"></a>字典的操作，增，删，改，查询</h3><h4 id="查：根据key来查询"><a href="#查：根据key来查询" class="headerlink" title="查：根据key来查询"></a>查：根据key来查询</h4><p>字典嵌套字典<br>字典嵌套元祖<br>字典嵌套列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">d2=&#123;<span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;python15&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;teacher&#x27;</span>:[<span class="string">&#x27;小明&#x27;</span>,<span class="string">&#x27;小红&#x27;</span>,<span class="string">&#x27;小刚&#x27;</span>,<span class="string">&#x27;小白&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;vip&#x27;</span>:&#123;<span class="string">&#x27;A&#x27;</span>:<span class="string">&#x27;小红&#x27;</span>,<span class="string">&#x27;B&#x27;</span>:<span class="string">&#x27;小明&#x27;</span>,<span class="string">&#x27;c&#x27;</span>:<span class="string">&#x27;小白&#x27;</span>&#125;,</span><br><span class="line">    <span class="string">&#x27;score&#x27;</span>:(88,99,100),</span><br><span class="line">    <span class="string">&#x27;test&#x27;</span>:2334,</span><br><span class="line">    <span class="string">&#x27;test02&#x27;</span>:<span class="string">&#x27;hello&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line">取小明的值：方法一层一层的取定位，根据key</span><br><span class="line"><span class="built_in">print</span>(d2[<span class="string">&#x27;vip&#x27;</span>][<span class="string">&#x27;B&#x27;</span>])<span class="comment">#&gt;&gt;&gt;小明</span></span><br><span class="line">取最后一个老师的名字:</span><br><span class="line"><span class="built_in">print</span>(d2[<span class="string">&#x27;teacher&#x27;</span>][-1])<span class="comment">#&gt;&gt;&gt;小白</span></span><br><span class="line">取倒数第二的分数</span><br><span class="line"><span class="built_in">print</span>(d2[<span class="string">&#x27;score&#x27;</span>][-2])<span class="comment">#&gt;&gt;&gt;99</span></span><br></pre></td></tr></table></figure><h4 id="增"><a href="#增" class="headerlink" title="增"></a>增</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d[不存在的key] = 新值</span><br></pre></td></tr></table></figure><h4 id="改"><a href="#改" class="headerlink" title="改"></a>改</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d[已有的key] = 新值</span><br><span class="line">d2[<span class="string">&#x27;vip&#x27;</span>][<span class="string">&#x27;A&#x27;</span>] = <span class="string">&#x27;小刚&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(d2[<span class="string">&#x27;vip&#x27;</span>][<span class="string">&#x27;A&#x27;</span>])<span class="comment">#&gt;&gt;&gt;小刚</span></span><br><span class="line"><span class="built_in">print</span>(d2)<span class="comment">#&#123;&#x27;class&#x27;: &#x27;python15&#x27;, &#x27;teacher&#x27;: [&#x27;小明&#x27;, &#x27;小红&#x27;, &#x27;小刚&#x27;, &#x27;小白&#x27;], &#x27;vip&#x27;: &#123;&#x27;A&#x27;: &#x27;小刚&#x27;, &#x27;B&#x27;: &#x27;小明&#x27;, &#x27;c&#x27;: &#x27;小白&#x27;&#125;, &#x27;score&#x27;: (88, 99, 100), &#x27;test&#x27;: 2334, &#x27;test02&#x27;: &#x27;hello&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d.pop(<span class="string">&#x27;vip&#x27;</span>)<span class="comment">#根据key删除--删除键值对</span></span><br><span class="line">d.clear()<span class="comment">#清空字典</span></span><br><span class="line">d.popitem()<span class="comment">#随机删除某个键值对</span></span><br></pre></td></tr></table></figure><h3 id="其他用法"><a href="#其他用法" class="headerlink" title="其他用法"></a>其他用法</h3><h4 id="items-以列表返回可遍历的（键，值）元组数组"><a href="#items-以列表返回可遍历的（键，值）元组数组" class="headerlink" title="items():以列表返回可遍历的（键，值）元组数组"></a>items():以列表返回可遍历的（键，值）元组数组</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(d2.items())</span><br><span class="line"><span class="comment">#&gt;&gt;&gt;dict_items([(&#x27;class&#x27;, &#x27;python15&#x27;), (&#x27;teacher&#x27;, [&#x27;小明&#x27;, &#x27;小红&#x27;, &#x27;小刚&#x27;, &#x27;小白&#x27;]), (&#x27;vip&#x27;, &#123;&#x27;A&#x27;: &#x27;小刚&#x27;, &#x27;B&#x27;: &#x27;小明&#x27;, &#x27;c&#x27;: &#x27;小白&#x27;&#125;), (&#x27;score&#x27;, (88, 99, 100)), (&#x27;test&#x27;, 2334), (&#x27;test02&#x27;, &#x27;hello&#x27;)])</span></span><br></pre></td></tr></table></figure><h4 id="keys-以列表返回一个字典所有的键"><a href="#keys-以列表返回一个字典所有的键" class="headerlink" title="keys():以列表返回一个字典所有的键"></a>keys():以列表返回一个字典所有的键</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(d2.keys())</span><br><span class="line"><span class="comment">#&gt;&gt;&gt;dict_keys([&#x27;class&#x27;, &#x27;teacher&#x27;, &#x27;vip&#x27;, &#x27;score&#x27;, &#x27;test&#x27;, &#x27;test02&#x27;])</span></span><br></pre></td></tr></table></figure><h4 id="values-：以列表返回一个字典所有的值"><a href="#values-：以列表返回一个字典所有的值" class="headerlink" title="values()：以列表返回一个字典所有的值"></a>values()：以列表返回一个字典所有的值</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(d2.values())</span><br><span class="line"><span class="comment">#&gt;&gt;&gt;dict_values([&#x27;python15&#x27;, [&#x27;小明&#x27;, &#x27;小红&#x27;, &#x27;小刚&#x27;, &#x27;小白&#x27;], &#123;&#x27;A&#x27;: &#x27;小刚&#x27;, &#x27;B&#x27;: &#x27;小明&#x27;, &#x27;c&#x27;: &#x27;小白&#x27;&#125;, (88, 99, 100), 2334, &#x27;hello&#x27;])</span></span><br></pre></td></tr></table></figure><h4 id="pop-key-：删除指定key的字典值，会返回被删除的这个值"><a href="#pop-key-：删除指定key的字典值，会返回被删除的这个值" class="headerlink" title="pop(key)：删除指定key的字典值，会返回被删除的这个值"></a>pop(key)：删除指定key的字典值，会返回被删除的这个值</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(d2.pop(<span class="string">&#x27;test02&#x27;</span>))<span class="comment">#&gt;&gt;&gt;hello</span></span><br></pre></td></tr></table></figure><h4 id="del-字典名-key-删除指定key的字典值"><a href="#del-字典名-key-删除指定key的字典值" class="headerlink" title="del 字典名[key]:删除指定key的字典值"></a>del 字典名[key]:删除指定key的字典值</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">del d2[<span class="string">&#x27;teacher&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(d2)</span><br><span class="line">&gt;&gt;&gt;&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;python15&#x27;</span>, <span class="string">&#x27;vip&#x27;</span>: &#123;<span class="string">&#x27;A&#x27;</span>: <span class="string">&#x27;小刚&#x27;</span>, <span class="string">&#x27;B&#x27;</span>: <span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;c&#x27;</span>: <span class="string">&#x27;小白&#x27;</span>&#125;, <span class="string">&#x27;score&#x27;</span>: (88, 99, 100), <span class="string">&#x27;test&#x27;</span>: 2334&#125;</span><br></pre></td></tr></table></figure><h2 id="python运算符"><a href="#python运算符" class="headerlink" title="python运算符"></a>python运算符</h2><p>python语言支持以下类型的运算符：<br>算数运算符–must<br>比较（关系）运算符—must<br>赋值运算符—must<br>逻辑运算符—must<br>成员运算符—must<br>位运算符<br>身份运算符<br>运算符优先级</p><h3 id="算术运算符：-，-，"><a href="#算术运算符：-，-，" class="headerlink" title="算术运算符：+，-，*, /, %"></a>算术运算符：+，-，*, /, %</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = 10</span><br><span class="line">b = 5</span><br><span class="line"><span class="built_in">print</span>(a+b)<span class="comment">#&gt;&gt;&gt;15</span></span><br><span class="line"><span class="built_in">print</span>(a*b)<span class="comment">#&gt;&gt;&gt;50</span></span><br></pre></td></tr></table></figure><h4 id="字符串的拼接，列表的拼接"><a href="#字符串的拼接，列表的拼接" class="headerlink" title="+ 字符串的拼接，列表的拼接"></a>+ 字符串的拼接，列表的拼接</h4><p>乘法：对字符串列表 元组 要输出多次</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s_1=<span class="string">&#x27;hello&#x27;</span></span><br><span class="line">s_2=[1,2,3]</span><br><span class="line"><span class="built_in">print</span>(s_1*3)<span class="comment">#&gt;&gt;&gt; hellohellohello</span></span><br><span class="line"><span class="built_in">print</span>((s_1+<span class="string">&#x27; &#x27;</span>)*3)<span class="comment">#&gt;&gt;&gt; hello hello hello</span></span><br><span class="line"><span class="built_in">print</span>(s_2*2) <span class="comment">#&gt;&gt;&gt;[1, 2, 3, 1, 2, 3]</span></span><br></pre></td></tr></table></figure><h4 id="模运算-取余运算"><a href="#模运算-取余运算" class="headerlink" title="% 模运算 取余运算"></a>% 模运算 取余运算</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">5/4 商1余下1</span><br><span class="line"><span class="built_in">print</span>(5%4)<span class="comment">#&gt;&gt;&gt;:1</span></span><br><span class="line">5/3 商1余2</span><br><span class="line"><span class="built_in">print</span>(5%3)<span class="comment">#&gt;&gt;&gt;2</span></span><br><span class="line"><span class="built_in">print</span>(5/4)<span class="comment">#&gt;&gt;&gt;1.25</span></span><br></pre></td></tr></table></figure><p>作用：判断奇数偶数的<br>例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">x = int(input(<span class="string">&quot;请输入一个整数：&quot;</span>))<span class="comment">#一定要定义函数数据类型（格式化# ）</span></span><br><span class="line"><span class="keyword">if</span> x &lt;= 0:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;请输入大于0的整数！&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    y = x%2</span><br><span class="line">    <span class="keyword">if</span> y == 0:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;您输入的是偶数&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;您输入的是奇数&quot;</span>)</span><br><span class="line"></span><br><span class="line">x%2的值是0 则说明x是偶数</span><br><span class="line">x%2的值为1 则说明x是奇数</span><br></pre></td></tr></table></figure><p>判断数据类型：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">number = int(input(<span class="string">&quot;请输入一个数字：&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">type</span>(number) == int:</span><br><span class="line">    <span class="keyword">if</span> number == 0:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;请输入大于0的整数！&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result1 = number%2</span><br><span class="line">        <span class="keyword">if</span> result1 == 0:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;您输入的是偶数&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;您输入的是奇数&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;您输入的不是正整数！&quot;</span>)</span><br><span class="line"><span class="comment">#-----以上代码有个很大的问题，input()输出的值的数据类型为字符串，所以即使输入的是2，2的数据类型不是int，而是str</span></span><br><span class="line"></span><br><span class="line">nub = int(input())</span><br><span class="line">practise：上述的循环没有有效的判断出数据的类型，尝试判断数字是正数还是负数</span><br></pre></td></tr></table></figure><h3 id="比较（关系）运算符："><a href="#比较（关系）运算符：" class="headerlink" title="比较（关系）运算符："></a>比较（关系）运算符：</h3><p>6种比较关系：&gt;,&gt;=,&lt;,&lt;=,==,!=</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">nub1 = 10</span><br><span class="line">nub2 = 2</span><br><span class="line"><span class="built_in">print</span>(nub1 &gt; nub2)<span class="comment">#&gt;&gt;&gt;True</span></span><br><span class="line"><span class="built_in">print</span>(nub1 &gt;= nub2)<span class="comment">#&gt;&gt;&gt;True</span></span><br><span class="line"><span class="built_in">print</span>(nub1 == nub2)<span class="comment">#&gt;&gt;&gt;False</span></span><br><span class="line"><span class="built_in">print</span>(nub1 != nub2)<span class="comment">#&gt;&gt;&gt;True</span></span><br><span class="line"><span class="built_in">print</span>(nub1 &lt; nub2)<span class="comment">#&gt;&gt;&gt;False</span></span><br><span class="line"><span class="built_in">print</span>(nub1 &lt;= nub2)<span class="comment">#&gt;&gt;&gt;False</span></span><br></pre></td></tr></table></figure><p>python是区分大小写的！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;get&#x27;</span> == <span class="string">&#x27;Get&#x27;</span>)<span class="comment">#&gt;&gt;&gt;False</span></span><br><span class="line"><span class="built_in">print</span>(False == 0)<span class="comment">#&gt;&gt;&gt;True  0等同于False，1等同于True（主要用于判断语句）</span></span><br></pre></td></tr></table></figure><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符 = += -="></a>赋值运算符 = += -=</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x=6</span><br><span class="line"><span class="built_in">print</span>(x)<span class="comment">#&gt;&gt;&gt;6</span></span><br><span class="line">y=1</span><br><span class="line">y+=1<span class="comment">#即y=y+1</span></span><br><span class="line"><span class="built_in">print</span>(y)<span class="comment">#&gt;&gt;&gt;2</span></span><br><span class="line">z=3</span><br><span class="line">z-=1<span class="comment">#即z=z-1&gt;&gt;&gt;2</span></span><br><span class="line"><span class="built_in">print</span>(z)<span class="comment">#&gt;&gt;&gt;2</span></span><br></pre></td></tr></table></figure><h2 id="if判断"><a href="#if判断" class="headerlink" title="if判断"></a>if判断</h2><p>if 判断条件:<br>    执行语句….<br>else:<br>    执行语句….</p><p>if 判断语句1:<br>    执行语句1….<br>elif 判断语句2:<br>    执行语句2….<br>else:<br>    执行语句3….</p><p>for example:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">score = 90</span><br><span class="line"><span class="keyword">if</span> score &gt;=90:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;优秀！&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> score &gt;= 80:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;良好！&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> score &gt;=60:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;及格&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;不及格&#x27;</span>)</span><br></pre></td></tr></table></figure><p>if条件判断语句里面，一定会有if开头，如果是多重判断我们可以引用elif 最后一种默认处理<br>但是else elif都不是必须的，根据业务场景<br>if, elif后面必须加判断条件<br>else后面不能加判断条件</p><p>练习：利用random函数生成随机整数，从1-9取出来，然后输入一个数字，来猜，如果大于，则打印bigger。小了，则打印less</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">random.randint(1,10) <span class="comment">#产生 1 到 10 的一个整数型随机数 </span></span><br><span class="line">random.random()         <span class="comment">#产生 0 到 1 之间的随机浮点数</span></span><br><span class="line">random.choice(<span class="string">&#x27;tomorrow&#x27;</span>)  <span class="comment">#从序列中随机选取一个元素</span></span><br><span class="line">random.randrange(1,100,2)  <span class="comment">#生成从1到100的间隔为2的随机整数</span></span><br><span class="line"></span><br><span class="line">import random <span class="comment">#一定要写这个</span></span><br><span class="line">r = random.randint(1,9)</span><br><span class="line">NUM = int(input(<span class="string">&#x27;请输入一个整数：&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> NUM &gt; r:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;bigger&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> NUM == r:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;equal&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;less&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><p>用于遍历一个集合<br>基本形式:<br>for 变量 in 集合：<br>    执行语句</p><p>for 变量 in 集合：<br>    执行语句1<br>else:<br>    执行语句2<br>通常与range()函数一起使用，range()返回一个列表，for…in…遍历这个列表中的元素<br>for example:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(10):</span><br><span class="line"><span class="built_in">print</span>(“循环10次”)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(-1,2):</span><br><span class="line"><span class="keyword">if</span> x &gt; 0:</span><br><span class="line"><span class="built_in">print</span>(“正数:”,x)</span><br><span class="line"><span class="keyword">elif</span> x == 0:</span><br><span class="line"><span class="built_in">print</span>(“零”,o)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(“负数”,x)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(“循环结束”)</span><br></pre></td></tr></table></figure><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><p>while循环：用于循环执行程序，在某个条件下，循环执行某段程序，以处理需要重复处理的相同任务。<br>基本形式：<br>while 判断条件：<br>执行语句….</p><p>判断条件：可以是比较，逻辑，成员，True，False 0，1，非空数据，空数据<br>最终要的依据:判断条件的结果，到底是True 还是False<br>执行逻辑，先判断条件，再根据条件的值，决定是否要执行下面的代码块<br>执行完毕 会再次判断while后面的条件，决定是否要执行下面的代码块<br>True 死循环<br>False 不会执行while下面的代码块<br>0 就相当于False，所以不会执行while下面的代码<br>1 相当于True，会进入死循环<br>[]/{}/()/‘’ 不会执行while下面的代码#即为False<br>[1]/(1,2)/{“name”:”python”}  死循环#即为True<br>什么也不填 报错。while后面必须要填写一个条件</p><p>综上所述，while后面的条件一直为真，则会陷入死循环；同理，条件一直为False则永远不进入循环体内</p><p>如何防止进入死循环以及无法进入while循环呢<br>解决方案：<br>1.while后面的条件不为恒定值：让while后面的条件随着循环执行的次数变化而变化<br>    1)引入变量，并在内部实现变量的递增或递减<br>    2)变量与while后面的条件相结合</p><p>2.while后面的条件为恒定值<br>    1)引入continue 和 break<br>    2)添加内部判断条件</p><p>9.break&amp;continue </p><p>practice：<br>我要循环三次<br>变量自减，在恒定true的情况下，在循环的内部添加判断条件，达到可控的循环（避免死循环）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">count=3</span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;这个是python_while循环条件下的语句&#x27;</span>)</span><br><span class="line">    count -=1<span class="comment">#每执行一次都会减1</span></span><br><span class="line">    <span class="built_in">print</span>(count)</span><br><span class="line">    <span class="keyword">if</span> count&gt;0:</span><br><span class="line">        <span class="built_in">continue</span><span class="comment">#结束本次循环，继续下一次循环</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">break</span><span class="comment">#结束循环</span></span><br></pre></td></tr></table></figure><h2 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h2><p>知识点：<br>try…except…finally语句<br>raise语句<br>assert语句<br>自定义异常<br>程序调试<br>在python3中，BaseException是所有异常的基类，所有的内置异常都是它的派生类。用户自定义的异常也应该继承它。常见内部异常：<br>1.AssertionError&gt;assert语句失败时出发；<br>2.AttributeError&gt;属性引用和属性赋值异常<br>3.ImportError&gt;导入异常，点那个import语句或from语句无法再模块中找到相应文件名称时触发<br>4.NameError&gt;名称异常，在局部或全局空间中无法找到文件名称时触发<br>5.SyntaxError&gt;语法错误<br>6.SystemError&gt;编译器内部错误<br>7.TypeError&gt;当操作或者函数应用找不到合适的类型时触发</p><h3 id="try…except…"><a href="#try…except…" class="headerlink" title="try…except…"></a>try…except…</h3><pre><code>try:#尝试读取一个不存在的文件    open(“hello.txt”,“r”)except FileNotFoundError:#捕获FileNotFoundError异常    print(“文件不存在”)excrpt:#    其他异常情况    print(“程序异常”)</code></pre><p>异常处理语也可以嵌套：<br>    try:<br>        s =“hello”<br>        try:<br>            print()<br>            print()<br>        Except TypeError:<br>            Print(“字符串不支持减法运算”)<br>    except:<br>        Print(“异常”)<br>attention：若外层try子句中的代码块引发异常，程序将直接跳转到外层try对应的except子句，而内部的try语句不会被执行。<br>    try:<br>        执行语句<br>    except FileNotFoundError:#捕获指定异常<br>        执行语句<br>finally:#无论异常是否发生finally子句都会被执行<br>    执行语句</p><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h3 id="什么是文件？"><a href="#什么是文件？" class="headerlink" title="什么是文件？"></a>什么是文件？</h3><p>文件是数据的集合和抽象<br>文件类型：1.文本文件；2.二进制文件<br>文件本质上都是存储在存储器上的二进制数据</p><h3 id="字符编码："><a href="#字符编码：" class="headerlink" title="字符编码："></a>字符编码：</h3><p>1.ascii码—最先发明的字符编码（一个字符占据一个字节）；<br>2.gb2312:简体中文字符集；<br>3.gbk（对gb2312的优化）；<br>4.unicode：纳入世界上所有符号，但是效率不高；<br>5.utf-8:为了提高unicode效率，现在最常用的编码方式</p><h3 id="open-函数"><a href="#open-函数" class="headerlink" title="open()函数"></a>open()函数</h3><p>指定处理模式，设置打开的文件为只读，只写，或可读写状态。<br>open(file,mode=’’,buffering=-1,encoding=None,errors=None,newline=None,closed=True,opener=None)<br>参数：<br>file-&gt;预打开的文件名，若文件不存在，open()将创建文件，如“test.txt”or 指定文件放置的位置“/user/Desktop/test.txt”<br>    mode-&gt;文件的打开模式，<br>“r”-&gt;以只读的方式打开文件；<br>“r+” -&gt;以读写的方式打开文件;<br>“w”-&gt;以写入的方式打开文件;删除文件内容，重新写入，若文件不存在则新建文件<br>“w+” -&gt;以读写的方式打开文件;删除文件内容，重新写入，若文件不存在则新建文件<br>“a” -&gt;;以写入的方式打开文件，在文件末尾追加新的内容，若文件不存在则新建文件<br>“a+” -&gt;;以读写的方式打开文件，在文件末尾追加新的内容，若文件不存在则新建文件<br>“b” -&gt;;以二进制模式打开文件，可与r，w，a，结合使用<br>“U” -&gt;支持所有换行符号。“\r”,”\n”,”\r\n”都表示换行</p><p>和mode组合的字符：<br>“b”二进制模式，例如：“rb”表示二进制读取<br>“t”文本模式（默认），例如：rt一般省略t<br>“+”读取写入，例如“r+”表示同时读写</p><p>1.基本操作：<br>创建一个名为test.txt的文本文件，（注意编码方式）文件中写入一下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">窗前明月光，疑是地上霜。举头望明月，低头思故乡。</span><br></pre></td></tr></table></figure><p>打开文件mode = rt,t可以省略</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fb = open(‘test.txt’，‘r’，encoding=‘utf-8’)</span><br><span class="line"><span class="comment">#读取</span></span><br><span class="line">content = fb.read()</span><br><span class="line"><span class="built_in">print</span>(content)</span><br><span class="line"><span class="comment">#关闭文件</span></span><br><span class="line">fb.close()</span><br></pre></td></tr></table></figure><p>attention:上面这种操作经常因为忘记关闭文件句柄，造成资源浪费，所以处理文件是往往使用with语句进行上下文管理。</p><p>2.with上下文管理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">with open(‘test.txt’，‘r’，encoding= ‘utf-8’)  as fb:</span><br><span class="line">content = fb.read()</span><br><span class="line"><span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure><p>3.逐行读取readline<br>从文件中读取一行，如果f.readline()返回一个空的字符串，表示已经达到了文件末尾</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">with open(‘test.txt’，‘r’，encoding= ‘utf-8’)  as fb:</span><br><span class="line"><span class="built_in">print</span>(fb.readline())</span><br></pre></td></tr></table></figure><p>readlines&gt;&gt;&gt;以列表形式返回所有行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">with open(‘test.txt’，‘r’，encoding= ‘utf-8’)  as fb:</span><br><span class="line">content = fb.readlines()</span><br><span class="line"><span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure><p>迭代:要从文件中读取行，也可以循环遍历文件对象，这使内存高效，快速的，并简化代码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">with open(‘test.txt’，‘r’，encoding= ‘utf-8’)  as fb:</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fb:</span><br><span class="line"><span class="built_in">print</span>(line)</span><br></pre></td></tr></table></figure><p>4.读二进制文件<br>任何文件都可以以二进制读的方式打开</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">with open(‘test.txt’，‘rb’)  as fb:</span><br><span class="line">content = fb.read()</span><br><span class="line"><span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure><p>mode = rb，不需要encoding参数</p><p>5.写文本文件_清除写w</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">with open(path,<span class="string">&#x27;a&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) as f:</span><br><span class="line">f.write(name + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        f.writelines(text)</span><br><span class="line">        f.write(<span class="string">&#x27;\n\n&#x27;</span>)</span><br><span class="line">w会清除原文件内容重新写入</span><br><span class="line"></span><br><span class="line">6.写文本文件_追加写_a</span><br><span class="line"></span><br><span class="line">7.写文本文件_排他写x：当写入的文件存在则不创建，报错-&gt;&gt;&gt;file exists：‘test.txt’</span><br><span class="line"></span><br><span class="line">8.写二进制文件：wb；这种模式下写入内容为字节数据</span><br><span class="line"></span><br><span class="line">9.文件指针：open函数返回的文件对象使用文件指针来记录当前在文件中的位置</span><br><span class="line"></span><br><span class="line">10.read方法：在读模式下，使用文件对象的<span class="built_in">read</span> 方法可以读取文件的内容，接受一个整数参数表示读取内容的大小，文本模式下表示字符数量，二进制模式下表示字节大小。</span><br><span class="line">``` bash</span><br><span class="line">with open(‘test.txt’，‘r’，encoding= ‘utf-8’)  as fb:</span><br><span class="line">content = fb.read(3)</span><br><span class="line"><span class="comment">#&gt;床前明</span></span><br></pre></td></tr></table></figure><p>11.tell方法：返回整数，表示文件指针距离文件开头的字节数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">with open(‘test.txt’，‘r’，encoding= ‘utf-8’)  as fb:</span><br><span class="line"><span class="built_in">print</span>(fb.tell())<span class="comment">#&gt;&gt;&gt;0</span></span><br><span class="line">content = fb.read(3)</span><br><span class="line"><span class="built_in">print</span>(content)</span><br><span class="line"><span class="built_in">print</span>(fb.tell())<span class="comment">#&gt;&gt;&gt;9</span></span><br></pre></td></tr></table></figure><p>12.seek方法：移动文件句柄</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">seek(offset= ;<span class="built_in">whence</span>=0)</span><br><span class="line">offset：偏移指针的字节数</span><br><span class="line"><span class="built_in">whence</span>：表示便宜参考，默认为0</span><br><span class="line">0&gt;&gt;&gt;表示偏移参考文件的开头，offset必须是=&gt;0的整数</span><br><span class="line">1&gt;&gt;&gt;表示偏移参考当前位置，offset可以是负数</span><br><span class="line">2&gt;&gt;&gt;表示偏移参考文件的结尾，offset一般是负数</span><br></pre></td></tr></table></figure><h2 id="模块-model-amp-包-packge-amp-函数-function"><a href="#模块-model-amp-包-packge-amp-函数-function" class="headerlink" title="模块(model)&amp;包(packge)&amp;函数(function)"></a>模块(model)&amp;包(packge)&amp;函数(function)</h2><h3 id="模块概念"><a href="#模块概念" class="headerlink" title="模块概念"></a>模块概念</h3><p>模块是一个包含python定义和语句的文件，文件名就是模块名后跟文件后缀.py<br>（一个文件即一个模块）</p><pre><code>导入模块1：import 模块名for example:import requests;使用模块中的函数：（在导入模块前提下）res = requests.get(url=,headers=,params=)此方法：当前变量表中，不会直接定义导入的模块的函数名，他只定义了模块名，所以使用函数则是通过模块名访问函数导入模块2：from 模块名 import 函数名For example:from fibo import fib,fib2此方法：并不会把被调模块引入当前的变量表中，而是将函数fib，fib2引入，可直接访问两个函数导入模块3：from 模块名 import *此方法：导入模块中定义的所有名称（函数名，变量，类名）导入模块4：from 模块名 as 新名称            from 模块名 import 名称 as 新名称</code></pre><h3 id="包的概念"><a href="#包的概念" class="headerlink" title="包的概念"></a>包的概念</h3><p>模块的问题解决了代码过长不便于维护的问题，为避免模块名冲突，python又引入了用目录来组织模块的方法，包<br>for example:创建名为my_package的文件夹，将模块my_model.py放入该文件夹下，则可通过import my_package.my_model 来引入，目的：避免程序中不同包下存在不同的模块，避免引入模块时冲突。</p><h3 id="函数概念"><a href="#函数概念" class="headerlink" title="函数概念"></a>函数概念</h3><p>具备一定功能，可重复使用的语句，用函数名来表示并通过函数名进行调用，每次使用函数可以提供不同的参数作为输入，以实现对不同数据的处理。</p><h4 id="函数调用的过程"><a href="#函数调用的过程" class="headerlink" title="函数调用的过程"></a>函数调用的过程</h4><p>1.调用程序在调用处暂停执行；<br>2.在调用时将实参赋值给函数的形参；<br>3.执行函数体语句；<br>4.函数调用结束给出返回值，程序回到调用前的暂停处继续执行<br>def -&gt;&gt;python中定义函数的关键字<br>def 函数名(参数列表)：<br>    函数体<br>    return 返回值列表</p><h4 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h4><h5 id="形参："><a href="#形参：" class="headerlink" title="形参："></a>形参：</h5><p>必须参数：定义函数时，调用者必须传递实参给这个形参，他就是必须参数，直接定义在函数名后()中的形参就是必须参数。<br>默认参数：定义函数时，某些形参可能在调用时不用接收实参，这种情况可以定义为默认参数，在函数名后()，以参数名=默认值的形式定义的形参就是必须参数，默认参数必须定义在必须参数的后面<br>For example:定义一个函数，它接收两个参数content和times，content是函数需要打印的内容，times是函数打印的次数，若不传递times则默认打印一次。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">def my_print(content,<span class="built_in">times</span>=1):  <span class="comment">#定义函数</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="built_in">times</span>):</span><br><span class="line">Print(content)</span><br><span class="line">my_print(‘happy birthday!’)<span class="comment">#调用，不写入times值</span></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; happy birthday!</span></span><br><span class="line">my_print(‘happy birthday!’,2)  <span class="comment">#调用，指定times值</span></span><br><span class="line"><span class="comment">#&gt;&gt;&gt; happy birthday!</span></span><br><span class="line"> happy birthday!</span><br><span class="line"></span><br><span class="line"><span class="comment">##### 不定参数</span></span><br><span class="line">在定义函数时，不确定在调用时会传递多少个实参，可定义不定参数</span><br><span class="line">位置不定参数：</span><br><span class="line">在形参前加*号可以定义位置不定参数，通常定义为*args</span><br><span class="line">用来接收函数调用时，以位置参数传递过来的超过形参数量的多余的参数</span><br><span class="line">不定参数必须定义在默认参数后面</span><br><span class="line"><span class="keyword">for</span> example:</span><br><span class="line">``` bash</span><br><span class="line">def add(x,y,*args):</span><br><span class="line">x += y</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> args:</span><br><span class="line">x += i</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line">add(1,2,3,4)<span class="comment">#&gt;&gt;&gt; 10</span></span><br></pre></td></tr></table></figure><h5 id="关键字不定参数"><a href="#关键字不定参数" class="headerlink" title="关键字不定参数"></a>关键字不定参数</h5><p>在形参前加<strong>号可以定义关键字不定参，通常定义为</strong>kwargs<br>用来接收函数调用时，以关键字参数传递过来的超过形参的多余的实参<br>for example:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def func(a,**kwargs):</span><br><span class="line"><span class="built_in">print</span>(kwargs,<span class="built_in">type</span>(kwargs))</span><br><span class="line">func(a=1,b=2,c=3,d=4)</span><br><span class="line"><span class="comment">#&gt;&gt;&gt;&#123;‘b’=2,’c’= 3,’d’=4&#125;&lt;class’dict’&gt;</span></span><br><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="comment">##### 实参：</span></span><br><span class="line">1.位置参数：调用函数时，传递实参时默认会按照形参的位置一一对应，这种实参传递叫做位置参数</span><br><span class="line"><span class="keyword">for</span> example:</span><br><span class="line">``` bash</span><br><span class="line">def my_power(x,n):</span><br><span class="line"><span class="built_in">print</span>(x**n)<span class="comment">#x的n次幂</span></span><br><span class="line">my_power(3,2)</span><br><span class="line"><span class="comment">#&gt;&gt;&gt;9</span></span><br></pre></td></tr></table></figure><p>2.关键字参数：调用函数时，传递实参时以 形参名=实参 的形式传递参数，叫做关键字参数<br>for example:<br>调用上方函数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_power(x=2,n=3)</span><br><span class="line"><span class="comment">#&gt;&gt;&gt;8</span></span><br></pre></td></tr></table></figure><ol start="3"><li>*；**在传递实参时的用法</li></ol><p><em>解包：在传递实参的时候，可以通过</em>对迭代对象(列表)进行解包<br>for example：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def fun(a,b,*arg):</span><br><span class="line">fun(*ls)<span class="comment">#&gt;&gt;&gt;1 2 (3, 4, 5, 6)</span></span><br></pre></td></tr></table></figure><p><strong>解包：在传递实参时候，可以通过</strong>对字典对象进行解包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def fun(a,b,**kwargs):</span><br><span class="line">    <span class="built_in">print</span>(a,b,kwargs)</span><br><span class="line">dic = &#123;<span class="string">&#x27;a&#x27;</span>:1,<span class="string">&#x27;b&#x27;</span>:2,<span class="string">&#x27;c&#x27;</span>:3,<span class="string">&#x27;d&#x27;</span>:4&#125;</span><br><span class="line">fun(**dic)<span class="comment">#&gt;&gt;&gt;1 2 &#123;&#x27;c&#x27;: 3, &#x27;d&#x27;: 4&#125;</span></span><br></pre></td></tr></table></figure><h5 id="返回值return"><a href="#返回值return" class="headerlink" title="返回值return"></a>返回值return</h5><p>Python中使用return关键字来退出函数，返回到函数被调用的地方继续往下执行<br>函数中可以没有返回值，也就是说函数中可以没有return语句，这时函数返回None<br>for example：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def add(x,y,*args):</span><br><span class="line">x += y</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> args:</span><br><span class="line">x += i</span><br><span class="line"><span class="built_in">return</span> x </span><br><span class="line">res = add(1,2)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment">#&gt;&gt;&gt;3</span></span><br></pre></td></tr></table></figure><h4 id="Lambdah函数"><a href="#Lambdah函数" class="headerlink" title="Lambdah函数"></a>Lambdah函数</h4><p>用来定义简单的，可以在一行内表示的函数(用的少)<br>语法格式：lambda arg1,arg2,… : expression</p><h4 id="变量作用域：局部变量；全局变量"><a href="#变量作用域：局部变量；全局变量" class="headerlink" title="变量作用域：局部变量；全局变量"></a>变量作用域：局部变量；全局变量</h4><p>global关键字：有时候需要在函数内部修改全局变量。使用globals关键字可以在函数内部修改全局变量</p><p>for example：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = 1</span><br><span class="line">def fun():</span><br><span class="line">global a </span><br><span class="line">a += 1</span><br><span class="line">fun()</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment">#&gt;&gt;&gt;2</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;总结的python基础语法，必须熟记和使用&lt;br&gt;(持续完善)&lt;/p&gt;</summary>
    
    
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>jmeter非GUI操作流程</title>
    <link href="http://example.com/2021/12/13/JMeter%E9%9D%9Egui%E6%93%8D%E4%BD%9C%E6%B5%81%E7%A8%8B/"/>
    <id>http://example.com/2021/12/13/JMeter%E9%9D%9Egui%E6%93%8D%E4%BD%9C%E6%B5%81%E7%A8%8B/</id>
    <published>2021-12-12T16:02:57.000Z</published>
    <updated>2021-12-19T13:57:35.999Z</updated>
    
    <content type="html"><![CDATA[<p>工作中曾接触和使用到的压测方式</p><span id="more"></span><p>服务器上环境搭建<br>1.jmeter 版本：apache-jmeter-5.2.1<br>2.插件：serverAgent-2.2.3<br>默认端口：4444<br>重新分配端口：./startAgent.sh –tcp-port  3307 –udp-port 3308 –sysinfo<br>3.本地写好步骤<br>4.使用filezilla将写好的脚本上传至服务器（注意ip和端口使用内网ip+端口，注意区分管理系统后台还是小程序后台，测试IP：172.19.40.211;端口：8082（管理系统后台）；8081（小程序后台））<br>5.执行脚本：jmeter -n -t tuangou_test02.jmx -l test004.jtl -e -o tuangoutestreport<br>6.将 tuangoutestreport下载至本机使用html打开<br>7.mysql数据库查询最大连接数：show variables like ‘max_connections’<br>8.修改mysql数据库最大连接数：set global max_connections = 151;<br>9.服务器上查看运行中的端口号：netstat -ntlp<br>10.运行serverAgent：./startAgent.sh 或者 nohup ./startAgent.sh &amp; ，把Agent服务放到后台并且不挂起。<br>11.使配置文件生效:source profile<br>12.jtl文件的查看方式，gui界面下，使用查看结果树，聚合报告<br>13.从数据库中导出用户数据<br>14.使用插件PerfMon Metrics Collector进行服务器资源监控，在进行非gui执行之前需要配置输出的file，注意不能与最终输出的测试结果jtl文件相同，可以是csv也可以是jtl文件</p><p>防火墙相关操作<br>1 、防火墙关闭 -ping 得通<br>firewall-cmd –add-port=4444/tcp –permanent ## 永久添加 4444 端⼝<br>firewall-cmd –list-ports ## 列出开放的端⼝<br>systemctl stop firewalld ## 关闭防火墙<br>systemctl start firewalld ## 开启防火墙<br>systemctl status firewalld ## 查看防火墙状态<br>systemctl restart firewalld ## 重启防火墙</p><p>netstat -tunlp##查看端口占用</p>]]></content>
    
    
    <summary type="html">工作中曾接触和使用到的压测方式</summary>
    
    
    
    
    <category term="jmeter" scheme="http://example.com/tags/jmeter/"/>
    
  </entry>
  
</feed>
